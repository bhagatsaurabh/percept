{"version":3,"sources":["webpack://Percept/webpack/universalModuleDefinition","webpack://Percept/./src/Math/constants.ts","webpack://Percept/./src/Math/dimension.ts","webpack://Percept/./src/Math/math.ts","webpack://Percept/./src/Math/matrix.ts","webpack://Percept/./src/Math/transform.ts","webpack://Percept/./src/Math/vector.ts","webpack://Percept/./src/View/ellipse.ts","webpack://Percept/./src/View/empty.ts","webpack://Percept/./src/View/image.ts","webpack://Percept/./src/View/line.ts","webpack://Percept/./src/View/polygon.ts","webpack://Percept/./src/View/rectangle.ts","webpack://Percept/./src/View/text.ts","webpack://Percept/./src/View/view.ts","webpack://Percept/./src/canvas.ts","webpack://Percept/./src/color.ts","webpack://Percept/./src/debug.ts","webpack://Percept/./src/drawing.ts","webpack://Percept/./src/enums.ts","webpack://Percept/./src/node.ts","webpack://Percept/./src/percept.ts","webpack://Percept/webpack/bootstrap","webpack://Percept/webpack/startup"],"names":["root","factory","exports","module","define","amd","self","Constant","Math","PI","max","this","width","height","Dimension","multiply","another","result","Matrix","Array","value","length","map","x","i","j","sum","k","multiplyInPlace","clone","getRotation","atan2","Identity","Zero","Multiply","matrix1","matrix2","_parent","newParent","childs","indexOf","splice","push","parent","sort","a","b","node","order","_position","newPosition","Vector2","transform","worldTransform","_rotation","degrees","_localRotation","newRotation","_scale","newScale","relativeControlPoints","controlPoints","forEach","controlPoint","subtract","position","updateWorldTransform","parentWorldTransform","localTrasform","y","id","cos","rotation","TAU","sin","localRotation","scale","child","applyTransform","refControlPoints","index","Transform","toString","toFixed","add","arg1","arg2","addInPlace","subtractInPlace","rotate","pivot","cosT","sinT","rotateInPlace","tmpX","tmpY","matrix","transformInPlace","Midpoint","vector1","vector2","Distance","sqrt","pow","One","Bounds","vectors","minVec","Number","MAX_VALUE","maxVec","MIN_VALUE","vector","Average","sumX","sumY","Random","minXOrCanvas","maxX","minY","maxY","Canvas","random","Lerp","start","end","amount","Node","_render","props","context","strokeStyle","outlineColor","create","fillStyle","fillColor","lineWidth","outlineWidth","setLineDash","outlineDashSegments","shadowColor","shadowBlur","shadowOffset","staticShadow","shadowOffsetX","shadowOffsetY","absolutePosition","beginPath","minor","major","arc","ellipse","fill","outline","stroke","_offRender","offContext","hitColor","getDimension","Ellipse","Empty","translate","topLeft","drawImage","_source","fillRect","source","window","Image","src","crossOrigin","_from","_to","color","lineCap","lineDashSegments","moveTo","from","lineTo","to","Line","closePath","bounds","abs","vertices","center","Polygon","Rectangle","_text","text","font","strokeText","_originalWidth","_originalHeight","fillText","textMetricContext","document","createElement","getContext","measureText","Text","gradient","delta","Handle","AUTO","offset","createLinearGradient","colors","addColorStop","weights","LinearGradient","fromRadius","fromCenter","fromOffset","toCenter","toOffset","toRadius","createRadialGradient","RadialGradient","draw","drawing","drawingHandle","cancelAnimationFrame","requestAnimationFrame","render","bind","element","HTMLDivElement","canvasElement","clientWidth","clientHeight","appendChild","body","offCanvasElement","OffscreenCanvas","floor","rgbToHex","rgb","Color","_componentToHex","c","hex","debugPoint","key","point","frames","Debug","limitDebugCalls","debugCalls","debugFunction","_debugPoint","arguments","canvas","debugLine","_debugLine","show","debug","call","save","restore","shift","_registerEvents","currentHitNode","prevHitNode","canvasOffset","currentDragNode","onmousemove","ev","getBoundingClientRect","mousePos","clientX","left","clientY","top","_getHitNode","onmousedown","hitNode","onmouseup","onclick","oncontextmenu","preventDefault","colorToNode","getImageData","data","clearRect","renderTree","globalUpdate","setContext","setDrawing","setHitColor","cNode","remove","nodeOrID","currentNode","queue","_debugSceneGraph","indent","console","log","rootNode","Drawing","zIndex","on","eventKey","callback","registeredEvents","offRender","method","args","dispose","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__"],"mappings":"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","file":"percept.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Percept\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Percept\"] = factory();\n\telse\n\t\troot[\"Percept\"] = factory();\n})(self, function() {\nreturn ","/**@hidden */\r\n\r\nexport enum Constant {\r\n  TAU = (Math.PI / 180)\r\n}\r\n","/**@hidden */\r\n\r\nexport class Dimension {\r\n  constructor(public width: number, public height: number) { }\r\n\r\n  max() {\r\n    return Math.max(this.width, this.height);\r\n  }\r\n}\r\n","export * from './constants';\r\nexport * from './dimension';\r\nexport * from './matrix';\r\nexport * from './transform';\r\nexport * from './vector';\r\n","/**\r\n * A 3x3 Matrix\r\n */\r\nexport class Matrix {\r\n  value: number[][];\r\n\r\n  constructor(value: number[][]) {\r\n    this.value = value;\r\n  }\r\n\r\n  multiply(another: Matrix | number[][]): Matrix {\r\n    let result;\r\n    if (another instanceof Matrix) {\r\n      result = [...Array(this.value.length)].map(x => Array(another.value[0].length));\r\n\r\n      for (let i = 0; i < this.value.length; i++) {\r\n        for (let j = 0; j < another.value[0].length; j++) {\r\n          let sum = 0;\r\n          for (let k = 0; k < this.value[0].length; k++) {\r\n            sum += this.value[i][k] * another.value[k][j];\r\n          }\r\n          result[i][j] = sum;\r\n        }\r\n      }\r\n    } else {\r\n      result = [...Array(this.value.length)].map(x => Array(another[0].length));\r\n\r\n      for (let i = 0; i < this.value.length; i++) {\r\n        for (let j = 0; j < another[0].length; j++) {\r\n          let sum = 0;\r\n          for (let k = 0; k < this.value[0].length; k++) {\r\n            sum += this.value[i][k] * another[k][j];\r\n          }\r\n          result[i][j] = sum;\r\n        }\r\n      }\r\n    }\r\n\r\n    return new Matrix(result);\r\n  }\r\n\r\n  multiplyInPlace(another: Matrix | number[][]): Matrix {\r\n    let result;\r\n    if (another instanceof Matrix) {\r\n      result = [...Array(this.value.length)].map(x => Array(another.value[0].length));\r\n\r\n      for (let i = 0; i < this.value.length; i++) {\r\n        for (let j = 0; j < another.value[0].length; j++) {\r\n          let sum = 0;\r\n          for (let k = 0; k < this.value[0].length; k++) {\r\n            sum += this.value[i][k] * another.value[k][j];\r\n          }\r\n          result[i][j] = sum;\r\n        }\r\n      }\r\n    } else {\r\n      result = [...Array(this.value.length)].map(x => Array(another[0].length));\r\n\r\n      for (let i = 0; i < this.value.length; i++) {\r\n        for (let j = 0; j < another[0].length; j++) {\r\n          let sum = 0;\r\n          for (let k = 0; k < this.value[0].length; k++) {\r\n            sum += this.value[i][k] * another[k][j];\r\n          }\r\n          result[i][j] = sum;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.value = result;\r\n    return this;\r\n  }\r\n\r\n  clone() {\r\n    return new Matrix([\r\n      [this.value[0][0], this.value[0][1], this.value[0][2]],\r\n      [this.value[1][0], this.value[1][1], this.value[1][2]],\r\n      [this.value[2][0], this.value[2][1], this.value[2][2]]\r\n    ]);\r\n  }\r\n\r\n  /**\r\n   * Decomposes the rotation component from matrix to get absolute rotation for a child transform\r\n   */\r\n  getRotation(): number {\r\n    return Math.atan2(this.value[0][1], this.value[0][0]) * (180 / Math.PI);\r\n  }\r\n\r\n  static Identity() {\r\n    return new Matrix([[1, 0, 0], [0, 1, 0], [0, 0, 1]]);\r\n  }\r\n\r\n  static Zero() {\r\n    return new Matrix([[0, 0, 0], [0, 0, 0], [0, 0, 0]]);\r\n  }\r\n\r\n  static Multiply(matrix1: number[][], matrix2: number[][]) {\r\n    let result = [...Array(matrix1.length)].map(x => Array(matrix2[0].length));\r\n\r\n    for (let i = 0; i < matrix1.length; i++) {\r\n      for (let j = 0; j < matrix2[0].length; j++) {\r\n        let sum = 0;\r\n        for (let k = 0; k < matrix1[0].length; k++) {\r\n          sum += matrix1[i][k] * matrix2[k][j];\r\n        }\r\n        result[i][j] = sum;\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n}\r\n","/**@hidden */\r\n\r\nimport { Constant } from './math';\r\nimport { Matrix } from \"./math\";\r\nimport { Vector2 } from \"./math\";\r\nimport { Node } from '../node';\r\n\r\n// Stores a node's transform (position, rotation, scale)\r\nexport class Transform {\r\n\r\n  // reference control points to apply transform to\r\n  refControlPoints: Vector2[];\r\n  // transformed control points\r\n  controlPoints: Vector2[];\r\n  localTrasform: Matrix;\r\n  worldTransform: Matrix;\r\n  _parent: Transform;\r\n  childs: Transform[];\r\n\r\n  get parent(): Transform {\r\n    return this._parent;\r\n  }\r\n  set parent(newParent: Transform) {\r\n    if (this._parent) {\r\n      (this._parent.childs.indexOf(this)) && (this._parent.childs.splice(this._parent.childs.indexOf(this), 1));\r\n    }\r\n    (newParent) && (newParent.childs.push(this));\r\n    this._parent = newParent;\r\n\r\n    (this.parent) && this.parent.childs.sort((a, b) => {\r\n      return a.node.order - b.node.order;\r\n    });\r\n  }\r\n\r\n  get position(): Vector2 {\r\n    return this._position;\r\n  }\r\n  set position(newPosition: Vector2) {\r\n    this._position = newPosition;\r\n  }\r\n\r\n  get absolutePosition(): Vector2 {\r\n    return Vector2.Zero().transform(this.worldTransform);\r\n  }\r\n\r\n  get rotation(): number {\r\n    return this._rotation;\r\n  }\r\n  set rotation(degrees: number) {\r\n    this._rotation = degrees % 360;\r\n  }\r\n\r\n  get localRotation(): number {\r\n    return this._localRotation;\r\n  }\r\n  set localRotation(newRotation: number) {\r\n    this._localRotation = newRotation % 360;\r\n  }\r\n\r\n  get scale(): Vector2 {\r\n    return this._scale;\r\n  }\r\n  set scale(newScale: Vector2) {\r\n    this._scale = newScale;\r\n  }\r\n\r\n  constructor(public _position: Vector2, public _localRotation: number, public _rotation: number, public _scale: Vector2, controlPoints: Vector2[], public node: Node) {\r\n    this._parent = null;\r\n    this.childs = [];\r\n    this.localTrasform = Matrix.Identity();\r\n    this.worldTransform = Matrix.Identity();\r\n    this.refControlPoints = this.relativeControlPoints(controlPoints);\r\n    this.controlPoints = [...controlPoints];\r\n  }\r\n\r\n  private relativeControlPoints(controlPoints: Vector2[]): Vector2[] {\r\n    let result: Vector2[] = [];\r\n    controlPoints.forEach((controlPoint) => {\r\n      result.push(controlPoint.subtract(this.position));\r\n    });\r\n    return result;\r\n  }\r\n\r\n  // Updates this node's worldTransform using parent's worldTransform if any\r\n  updateWorldTransform(parentWorldTransform?: Matrix) {\r\n\r\n    // Set translation\r\n    this.localTrasform.value = [\r\n      [1, 0, 0],\r\n      [0, 1, 0],\r\n      [this.position.x, this.position.y, 1]\r\n    ];\r\n\r\n    // Transform rotation\r\n    if (this.parent.node.id != '#Root') {\r\n      let cos = Math.cos(this.rotation * Constant.TAU);\r\n      let sin = Math.sin(this.rotation * Constant.TAU);\r\n\r\n      this.localTrasform = (new Matrix([\r\n        [1, 0, 0],\r\n        [0, 1, 0],\r\n        [this.position.x, this.position.y, 1]\r\n      ]).multiply([\r\n        [cos, sin, 0],\r\n        [-sin, cos, 0],\r\n        [0, 0, 1],\r\n      ]).multiply([\r\n        [1, 0, 0],\r\n        [0, 1, 0],\r\n        [-this.position.x, -this.position.y, 1]\r\n      ])).multiply(this.localTrasform);\r\n    }\r\n\r\n    // Transform localRotation\r\n    let cos = Math.cos(this.localRotation * Constant.TAU);\r\n    let sin = Math.sin(this.localRotation * Constant.TAU);\r\n    this.localTrasform = new Matrix([\r\n      [cos, sin, 0],\r\n      [-sin, cos, 0],\r\n      [0, 0, 1]\r\n    ]).multiply(this.localTrasform);\r\n\r\n    // Transform scale\r\n    this.localTrasform = new Matrix([\r\n      [this.scale.x, 0, 0],\r\n      [0, this.scale.y, 0],\r\n      [0, 0, 1]\r\n    ]).multiply(this.localTrasform);\r\n\r\n    if (parentWorldTransform) {\r\n      this.worldTransform = this.localTrasform.multiply(parentWorldTransform);\r\n    } else {\r\n      this.worldTransform = this.localTrasform.clone();\r\n    }\r\n\r\n    this.childs.forEach((child) => {\r\n      child.updateWorldTransform(this.worldTransform);\r\n    });\r\n\r\n    this.applyTransform();\r\n  }\r\n\r\n  // Transforms each control point using this node's worldTransform\r\n  private applyTransform() {\r\n    this.refControlPoints.forEach((controlPoint, index) => {\r\n      this.controlPoints[index] = controlPoint.transform(this.worldTransform);\r\n    });\r\n  }\r\n}\r\n","import { Canvas } from \"../canvas\";\r\nimport { Constant } from \"./math\";\r\nimport { Matrix } from \"./math\";\r\n\r\n/**\r\n * Stores 2D Vector\r\n */\r\nexport class Vector2 {\r\n\r\n  tmpX: number;\r\n  tmpY: number;\r\n\r\n  constructor(public x: number, public y: number) { }\r\n\r\n  toString() {\r\n    return '[' + this.x.toFixed(3) + ', ' + this.y.toFixed(3) + ']';\r\n  }\r\n\r\n  add(arg1: number | Vector2, arg2?: number): Vector2 {\r\n    // Params : (vector2d) or (x, y)\r\n    if (arg1 instanceof Vector2) {\r\n      return new Vector2(this.x + arg1.x, this.y + arg1.y);\r\n    } else if (typeof arg2 === 'undefined') {\r\n      return new Vector2(this.x + arg1, this.y + arg1);\r\n    } else {\r\n      return new Vector2(this.x + arg1, this.y + arg2);\r\n    }\r\n  }\r\n\r\n  addInPlace(arg1: number | Vector2, arg2?: number): Vector2 {\r\n    // Params : (vector2d) or (x, y)\r\n    if (arg1 instanceof Vector2) {\r\n      this.x += arg1.x;\r\n      this.y += arg1.y;\r\n    } else if (!arg2) {\r\n      this.x += arg1;\r\n      this.y += arg1;\r\n    } else {\r\n      this.x += arg1;\r\n      this.y += arg2;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  multiply(arg1: number | Vector2, arg2?: number): Vector2 {\r\n    // Params : (vector2d) or (x, y)\r\n    if (arg1 instanceof Vector2) {\r\n      return new Vector2(this.x * arg1.x, this.y * arg1.y);\r\n    } else {\r\n      return new Vector2(this.x * arg1, this.y * arg2);\r\n    }\r\n  }\r\n\r\n  multiplyInPlace(arg1: number | Vector2, arg2?: number): Vector2 {\r\n    // Params : (vector2d) or (x, y)\r\n    if (arg1 instanceof Vector2) {\r\n      this.x *= arg1.x;\r\n      this.y *= arg1.y;\r\n    } else if (!arg2) {\r\n      this.x *= arg1;\r\n      this.y *= arg1;\r\n    } else {\r\n      this.x *= arg1;\r\n      this.y *= arg2;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  subtract(arg1: number | Vector2, arg2?: number): Vector2 {\r\n    // Params : (vector2d) or (x, y)\r\n    if (arg1 instanceof Vector2) {\r\n      return new Vector2(this.x - arg1.x, this.y - arg1.y);\r\n    } else {\r\n      return new Vector2(this.x - arg1, this.y - arg2);\r\n    }\r\n  }\r\n\r\n  subtractInPlace(arg1: number | Vector2, arg2?: number): void {\r\n    // Params : (vector2d) or (x, y)\r\n    if (arg1 instanceof Vector2) {\r\n      this.x -= arg1.x;\r\n      this.y -= arg1.y;\r\n    } else {\r\n      this.x -= arg1;\r\n      this.y -= arg2;\r\n    }\r\n  }\r\n\r\n  rotate(pivot: Vector2, degrees: number): Vector2 {\r\n    degrees = degrees * Constant.TAU;\r\n    let cosT = Math.cos(degrees);\r\n    let sinT = Math.sin(degrees);\r\n    return new Vector2(\r\n      (cosT * (this.x - pivot.x)) - (sinT * (this.y - pivot.y)) + pivot.x,\r\n      (sinT * (this.x - pivot.x)) + (cosT * (this.y - pivot.y)) + pivot.y\r\n    );\r\n  }\r\n\r\n  rotateInPlace(pivot: Vector2, degrees: number): Vector2 {\r\n    degrees = degrees * Constant.TAU;\r\n    let cosT = Math.cos(degrees);\r\n    let sinT = Math.sin(degrees);\r\n    this.tmpX = (cosT * (this.x - pivot.x)) - (sinT * (this.y - pivot.y)) + pivot.x;\r\n    this.tmpY = (sinT * (this.x - pivot.x)) + (cosT * (this.y - pivot.y)) + pivot.y;\r\n    this.x = this.tmpX;\r\n    this.y = this.tmpY;\r\n    return this;\r\n  }\r\n\r\n  max() {\r\n    return Math.max(this.x, this.y);\r\n  }\r\n\r\n  transform(matrix: Matrix) {\r\n    let result = Matrix.Multiply([[this.x, this.y, 1]], matrix.value);\r\n    return new Vector2(result[0][0], result[0][1]);\r\n  }\r\n\r\n  transformInPlace(matrix: Matrix) {\r\n    let result = Matrix.Multiply([[this.x, this.y, 1]], matrix.value);\r\n    this.x = result[0][0];\r\n    this.y = result[0][1];\r\n  }\r\n\r\n  static Midpoint(vector1: Vector2, vector2: Vector2): Vector2 {\r\n    return new Vector2((vector1.x + vector2.x) / 2, (vector1.y + vector2.y) / 2);\r\n  }\r\n\r\n  static Distance(vector1: Vector2, vector2: Vector2): number {\r\n    return Math.sqrt(Math.pow(vector2.x - vector1.x, 2) + Math.pow(vector2.y - vector1.y, 2));\r\n  }\r\n\r\n  static Zero(): Vector2 {\r\n    return new Vector2(0, 0);\r\n  }\r\n\r\n  static One(): Vector2 {\r\n    return new Vector2(1, 1);\r\n  }\r\n\r\n\r\n  static Bounds(vectors: Vector2[]): Vector2[] {\r\n    let minVec = new Vector2(Number.MAX_VALUE, Number.MAX_VALUE);\r\n    let maxVec = new Vector2(Number.MIN_VALUE, Number.MIN_VALUE);\r\n\r\n    vectors.forEach((vector) => {\r\n      if (vector.x < minVec.x) minVec.x = vector.x;\r\n      if (vector.y < minVec.y) minVec.y = vector.y;\r\n      if (vector.x > maxVec.x) maxVec.x = vector.x;\r\n      if (vector.y > maxVec.y) maxVec.y = vector.y;\r\n    });\r\n    return [minVec, maxVec];\r\n  }\r\n\r\n  static Average(vectors: Vector2[]): Vector2 {\r\n    let sumX = 0;\r\n    let sumY = 0;\r\n    vectors.forEach((vector) => {\r\n      sumX += vector.x;\r\n      sumY += vector.y;\r\n    });\r\n    return new Vector2(sumX / vectors.length, sumY / vectors.length);\r\n  }\r\n\r\n  static Random(minXOrCanvas: number | Canvas, maxX?: number, minY?: number, maxY?: number): Vector2 {\r\n    if (minXOrCanvas instanceof Canvas) {\r\n      return new Vector2(\r\n        Math.random() * minXOrCanvas.width,\r\n        Math.random() * minXOrCanvas.height\r\n      );\r\n    } else {\r\n      return new Vector2(\r\n        Math.random() * (maxX - minXOrCanvas) + minXOrCanvas,\r\n        Math.random() * (maxY - minY) + minY\r\n      );\r\n    }\r\n  }\r\n\r\n  static Lerp(start: Vector2, end: Vector2, amount: number): Vector2 {\r\n    return new Vector2(\r\n      start.x + ((end.x - start.x) * amount),\r\n      start.y + ((end.y - start.y) * amount)\r\n    );\r\n  }\r\n\r\n  clone(): Vector2 {\r\n    return new Vector2(this.x, this.y);\r\n  }\r\n}\r\n","import { Vector2 } from \"../Math/math\";\r\nimport { LinearGradient, RadialGradient } from \"./view\";\r\nimport { Node } from '../node';\r\n\r\ninterface IEllipseProperties {\r\n  outline?: boolean\r\n  fill?: boolean,\r\n  outlineColor?: string | LinearGradient | RadialGradient,\r\n  fillColor?: string | LinearGradient | RadialGradient,\r\n  outlineWidth?: number,\r\n  outlineDashSegments?: number[],\r\n  shadowColor?: string,\r\n  shadowOffset?: Vector2,\r\n  staticShadow?: boolean,\r\n  shadowBlur?: number\r\n}\r\n\r\nexport class Ellipse extends Node {\r\n\r\n  constructor(id: string, position: Vector2, public minor: number, public major: number, public props?: IEllipseProperties) {\r\n\r\n    super(id, position, [\r\n      position.subtract(0, minor),\r\n      position.add(major, 0),\r\n      position.add(0, minor),\r\n      position.subtract(major, 0)\r\n    ]);\r\n\r\n    (!props) && (this.props = {});\r\n    if (this.props.outlineColor && typeof (this.props.outlineColor) != 'string') {\r\n      this.props.outlineColor.node = this;\r\n    }\r\n    if (this.props.fillColor && typeof (this.props.fillColor) != 'string') {\r\n      this.props.fillColor.node = this;\r\n    }\r\n  }\r\n\r\n  _render(): void {\r\n    if (this.props) {\r\n      (this.props.outlineColor) && (this.context.strokeStyle = (typeof (this.props.outlineColor) == 'string') ? this.props.outlineColor : this.props.outlineColor.create(this.context));\r\n      (this.props.fillColor) && (this.context.fillStyle = (typeof (this.props.fillColor) == 'string') ? this.props.fillColor : this.props.fillColor.create(this.context));\r\n      (this.props.outlineWidth) && (this.context.lineWidth = this.props.outlineWidth);\r\n      (this.props.outlineDashSegments) && this.context.setLineDash(this.props.outlineDashSegments);\r\n      (this.props.shadowColor) && (this.context.shadowColor = this.props.shadowColor);\r\n      (this.props.shadowBlur) && (this.context.shadowBlur = this.props.shadowBlur);\r\n      if (this.props.shadowOffset) {\r\n        if (!this.props.staticShadow) {\r\n          let shadowOffset = this.props.shadowOffset.transform(this.transform.worldTransform).subtract(this.absolutePosition);\r\n          this.context.shadowOffsetX = shadowOffset.x;\r\n          this.context.shadowOffsetY = shadowOffset.y;\r\n        } else {\r\n          this.context.shadowOffsetX = this.props.shadowOffset.x;\r\n          this.context.shadowOffsetY = this.props.shadowOffset.y;\r\n        }\r\n      }\r\n    }\r\n\r\n    let position = this.absolutePosition;\r\n    this.context.beginPath();\r\n    if (this.minor == this.major) {\r\n      this.context.arc(position.x, position.y, this.minor, 0, 2 * Math.PI);\r\n    } else {\r\n      this.context.ellipse(\r\n        position.x, position.y,\r\n        this.major,\r\n        this.minor,\r\n        Math.atan2(this.transform.controlPoints[1].y - position.y, this.transform.controlPoints[1].x - position.x),\r\n        0,\r\n        2 * Math.PI\r\n      );\r\n    }\r\n    if (this.props.fill) {\r\n      this.context.fill();\r\n    }\r\n    if (this.props.outline || !this.props.fill) {\r\n      this.context.stroke();\r\n    }\r\n  }\r\n\r\n  _offRender(): void {\r\n    (this.props.outlineWidth) && (this.offContext.lineWidth = this.props.outlineWidth);\r\n    this.offContext.strokeStyle = this.hitColor;\r\n    this.offContext.fillStyle = this.hitColor;\r\n\r\n    let position = this.absolutePosition;\r\n    this.offContext.beginPath();\r\n    if (this.minor == this.major) {\r\n      this.offContext.arc(position.x, position.y, this.minor, 0, 2 * Math.PI);\r\n    } else {\r\n      this.offContext.ellipse(\r\n        position.x, position.y,\r\n        this.major,\r\n        this.minor,\r\n        Math.atan2(this.transform.controlPoints[1].y - position.y, this.transform.controlPoints[1].x - position.x),\r\n        0,\r\n        2 * Math.PI\r\n      );\r\n    }\r\n    if (this.props.fill) {\r\n      this.offContext.fill();\r\n    }\r\n    if (this.props.outline || !this.props.fill) {\r\n      this.offContext.stroke();\r\n    }\r\n  }\r\n\r\n  getDimension(): Vector2 {\r\n    return new Vector2(\r\n      Vector2.Distance(this.transform.controlPoints[1], this.transform.controlPoints[3]),\r\n      Vector2.Distance(this.transform.controlPoints[0], this.transform.controlPoints[2])\r\n    );\r\n  }\r\n}\r\n","import { Vector2 } from \"../Math/math\";\r\nimport { Node } from '../node';\r\n\r\nexport class Empty extends Node {\r\n\r\n  constructor(id: string, position: Vector2) {\r\n    super(id, position, []);\r\n  }\r\n\r\n  _render(): void { }\r\n  _offRender(): void { }\r\n\r\n  getDimension(): Vector2 {\r\n    return Vector2.Zero();\r\n  }\r\n}\r\n","import { Vector2 } from \"../Math/math\";\r\nimport { Node } from '../node';\r\n\r\ninterface IImageProperties {\r\n  shadowColor?: string,\r\n  shadowOffset?: Vector2,\r\n  staticShadow?: boolean,\r\n  shadowBlur?: number\r\n}\r\n\r\nexport class Image extends Node {\r\n\r\n  _source: HTMLImageElement;\r\n\r\n  constructor(id: string, position: Vector2, source: string | HTMLImageElement, public width: number, public height: number, public props?: IImageProperties) {\r\n    super(id, position, []);\r\n\r\n    (!props) && (this.props = {});\r\n    if (typeof (source) == 'string') {\r\n      this._source = new window.Image();\r\n      this._source.src = source;\r\n    } else {\r\n      this._source = source;\r\n    }\r\n    this._source.crossOrigin = \"Anonymous\";\r\n  }\r\n\r\n  _render(): void {\r\n    if (this.props) {\r\n      (this.props.shadowColor) && (this.context.shadowColor = this.props.shadowColor);\r\n      (this.props.shadowBlur) && (this.context.shadowBlur = this.props.shadowBlur);\r\n      if (this.props.shadowOffset) {\r\n        if (!this.props.staticShadow) {\r\n          let shadowOffset = this.props.shadowOffset.transform(this.transform.worldTransform).subtract(this.absolutePosition);\r\n          this.context.shadowOffsetX = shadowOffset.x;\r\n          this.context.shadowOffsetY = shadowOffset.y;\r\n        } else {\r\n          this.context.shadowOffsetX = this.props.shadowOffset.x;\r\n          this.context.shadowOffsetY = this.props.shadowOffset.y;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Rotate image using worldTransform's rotation component\r\n    this.context.translate(this.absolutePosition.x, this.absolutePosition.y);\r\n    this.context.rotate(this.transform.worldTransform.getRotation() * (Math.PI / 180));\r\n    this.context.translate(-this.absolutePosition.x, -this.absolutePosition.y);\r\n\r\n    let topLeft = this.absolutePosition.subtract((this.width * this.transform.scale.x) / 2, (this.height * this.transform.scale.y) / 2);\r\n    this.context.drawImage(this._source, topLeft.x, topLeft.y, this.width * this.transform.scale.x, this.height * this.transform.scale.y);\r\n  }\r\n\r\n  _offRender(): void {\r\n    this.offContext.fillStyle = this.hitColor;\r\n\r\n    // Rotate bounding-rectangle using worldTransform's rotation component\r\n    this.offContext.translate(this.absolutePosition.x, this.absolutePosition.y);\r\n    this.offContext.rotate(this.transform.worldTransform.getRotation() * (Math.PI / 180));\r\n    this.offContext.translate(-this.absolutePosition.x, -this.absolutePosition.y);\r\n\r\n    let topLeft = this.absolutePosition.subtract((this.width * this.transform.scale.x) / 2, (this.height * this.transform.scale.y) / 2);\r\n    this.offContext.fillRect(topLeft.x, topLeft.y, this.width * this.transform.scale.x, this.height * this.transform.scale.y);\r\n  }\r\n\r\n  getDimension(): Vector2 {\r\n    return new Vector2(\r\n      this.width,\r\n      this.height\r\n    );\r\n  }\r\n}\r\n","import { Vector2 } from \"../Math/math\";\r\nimport { LinearGradient, RadialGradient } from \"./view\";\r\nimport { Node } from '../node';\r\n\r\ninterface ILineProperties {\r\n  color?: string | LinearGradient | RadialGradient,\r\n  lineWidth?: number,\r\n  lineCap?: CanvasLineCap,\r\n  lineDashSegments?: number[],\r\n  shadowColor?: string,\r\n  shadowOffset?: Vector2,\r\n  staticShadow?: boolean,\r\n  shadowBlur?: number\r\n}\r\n\r\nexport class Line extends Node {\r\n\r\n  get from(): Vector2 {\r\n    if (this._from instanceof Node)\r\n      return this._from.absolutePosition;\r\n    else\r\n      return this.transform.controlPoints[0];\r\n  }\r\n  get to(): Vector2 {\r\n    if (this._to instanceof Node)\r\n      return this._to.absolutePosition;\r\n    else\r\n      return this.transform.controlPoints[1];\r\n  }\r\n\r\n  constructor(id: string, public _from: Vector2 | Node, public _to: Vector2 | Node, pivot?: number, public props?: ILineProperties) {\r\n    super(\r\n      id,\r\n      (_from instanceof Vector2 && _to instanceof Vector2) ?\r\n        ((pivot) ? _from.add((_to.x - _from.x) * pivot, (_to.y - _from.y) * pivot) : _from.clone()) :\r\n        (Vector2.Zero()),\r\n      (_from instanceof Vector2 && _to instanceof Vector2) ?\r\n        [_from, _to] :\r\n        []\r\n    );\r\n\r\n    (!props) && (this.props = {});\r\n    if (this.props.color && typeof (this.props.color) != 'string') {\r\n      this.props.color.node = this;\r\n    }\r\n  }\r\n\r\n  _render(): void {\r\n    if (this.props) {\r\n      (this.props.color) && (this.context.strokeStyle = (typeof (this.props.color) == 'string') ? this.props.color : this.props.color.create(this.context));\r\n      (this.props.lineWidth) && (this.context.lineWidth = this.props.lineWidth);\r\n      (this.props.lineCap) && (this.context.lineCap = this.props.lineCap);\r\n      (this.props.lineDashSegments) && this.context.setLineDash(this.props.lineDashSegments);\r\n      (this.props.shadowColor) && (this.context.shadowColor = this.props.shadowColor);\r\n      (this.props.shadowBlur) && (this.context.shadowBlur = this.props.shadowBlur);\r\n      if (this.props.shadowOffset) {\r\n        if (!this.props.staticShadow) {\r\n          let shadowOffset = this.props.shadowOffset.transform(this.transform.worldTransform).subtract(this.absolutePosition);\r\n          this.context.shadowOffsetX = shadowOffset.x;\r\n          this.context.shadowOffsetY = shadowOffset.y;\r\n        } else {\r\n          this.context.shadowOffsetX = this.props.shadowOffset.x;\r\n          this.context.shadowOffsetY = this.props.shadowOffset.y;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.context.beginPath();\r\n    this.context.moveTo(this.from.x, this.from.y);\r\n    this.context.lineTo(this.to.x, this.to.y);\r\n    this.context.stroke();\r\n  }\r\n\r\n  _offRender(): void {\r\n    (this.props.lineWidth) && (this.offContext.lineWidth = this.props.lineWidth);\r\n    this.offContext.strokeStyle = this.hitColor;\r\n\r\n    this.offContext.beginPath();\r\n    this.offContext.moveTo(this.from.x, this.from.y);\r\n    this.offContext.lineTo(this.to.x, this.to.y);\r\n    this.offContext.stroke();\r\n  }\r\n\r\n  getDimension(): Vector2 {\r\n    return new Vector2(Vector2.Distance(this.transform.controlPoints[0], this.transform.controlPoints[1]), 0);\r\n  }\r\n}\r\n","import { Vector2 } from \"../Math/math\";\r\nimport { LinearGradient, RadialGradient } from \"./view\";\r\nimport { Node } from '../node';\r\nimport { Handle } from \"../enums\";\r\n\r\ninterface IPolygonProperties {\r\n  outline?: boolean\r\n  fill?: boolean,\r\n  outlineColor?: string | LinearGradient | RadialGradient,\r\n  fillColor?: string | LinearGradient | RadialGradient,\r\n  outlineWidth?: number,\r\n  outlineDashSegments?: number[],\r\n  shadowColor?: string,\r\n  shadowOffset?: Vector2,\r\n  staticShadow?: boolean,\r\n  shadowBlur?: number\r\n}\r\n\r\nexport class Polygon extends Node {\r\n\r\n  constructor(id: string, vertices: Vector2[], center: Vector2 | Handle, public props?: IPolygonProperties) {\r\n\r\n    super(\r\n      id,\r\n      (center instanceof Vector2) ? center : Vector2.Average(vertices),\r\n      vertices\r\n    );\r\n\r\n    (!props) && (this.props = {});\r\n    if (this.props.outlineColor && typeof (this.props.outlineColor) != 'string') {\r\n      this.props.outlineColor.node = this;\r\n    }\r\n    if (this.props.fillColor && typeof (this.props.fillColor) != 'string') {\r\n      this.props.fillColor.node = this;\r\n    }\r\n  }\r\n\r\n  _render(): void {\r\n    if (this.props) {\r\n      (this.props.outlineColor) && (this.context.strokeStyle = (typeof (this.props.outlineColor) == 'string') ? this.props.outlineColor : this.props.outlineColor.create(this.context));\r\n      (this.props.fillColor) && (this.context.fillStyle = (typeof (this.props.fillColor) == 'string') ? this.props.fillColor : this.props.fillColor.create(this.context));\r\n      (this.props.outlineWidth) && (this.context.lineWidth = this.props.outlineWidth);\r\n      (this.props.outlineDashSegments) && this.context.setLineDash(this.props.outlineDashSegments);\r\n      (this.props.shadowColor) && (this.context.shadowColor = this.props.shadowColor);\r\n      (this.props.shadowBlur) && (this.context.shadowBlur = this.props.shadowBlur);\r\n      if (this.props.shadowOffset) {\r\n        if (!this.props.staticShadow) {\r\n          let shadowOffset = this.props.shadowOffset.transform(this.transform.worldTransform).subtract(this.absolutePosition);\r\n          this.context.shadowOffsetX = shadowOffset.x;\r\n          this.context.shadowOffsetY = shadowOffset.y;\r\n        } else {\r\n          this.context.shadowOffsetX = this.props.shadowOffset.x;\r\n          this.context.shadowOffsetY = this.props.shadowOffset.y;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.context.beginPath();\r\n    this.context.moveTo(this.transform.controlPoints[0].x, this.transform.controlPoints[0].y);\r\n    for (let index = 1; index < this.transform.controlPoints.length; index++) {\r\n      this.context.lineTo(this.transform.controlPoints[index].x, this.transform.controlPoints[index].y);\r\n    }\r\n    this.context.closePath();\r\n\r\n    if (this.props.fill) {\r\n      this.context.fill();\r\n    }\r\n    if (this.props.outline || !this.props.fill) {\r\n      this.context.stroke();\r\n    }\r\n  }\r\n\r\n  _offRender(): void {\r\n    (this.props.outlineWidth) && (this.offContext.lineWidth = this.props.outlineWidth);\r\n    this.offContext.strokeStyle = this.hitColor;\r\n    this.offContext.fillStyle = this.hitColor;\r\n\r\n    this.offContext.beginPath();\r\n    this.offContext.moveTo(this.transform.controlPoints[0].x, this.transform.controlPoints[0].y);\r\n    for (let index = 1; index < this.transform.controlPoints.length; index++) {\r\n      this.offContext.lineTo(this.transform.controlPoints[index].x, this.transform.controlPoints[index].y);\r\n    }\r\n    this.offContext.closePath();\r\n\r\n    if (this.props.fill) {\r\n      this.offContext.fill();\r\n    }\r\n    if (this.props.outline || !this.props.fill) {\r\n      this.offContext.stroke();\r\n    }\r\n  }\r\n\r\n  getDimension(): Vector2 {\r\n    let bounds = Vector2.Bounds(this.transform.controlPoints);\r\n\r\n    return new Vector2(\r\n      Math.abs(bounds[0].x - bounds[1].x),\r\n      Math.abs(bounds[0].y - bounds[1].y)\r\n    );\r\n  }\r\n}\r\n","import { Vector2 } from \"../Math/math\";\r\nimport { LinearGradient, RadialGradient } from \"./view\";\r\nimport { Node } from '../node';\r\n\r\ninterface IRectangleProperties {\r\n  outline?: boolean,\r\n  fill?: boolean,\r\n  outlineColor?: string | LinearGradient | RadialGradient,\r\n  fillColor?: string | LinearGradient | RadialGradient,\r\n  outlineWidth?: number,\r\n  outlineDashSegments?: number[],\r\n  shadowColor?: string,\r\n  shadowOffset?: Vector2,\r\n  staticShadow?: boolean,\r\n  shadowBlur?: number\r\n}\r\n\r\nexport class Rectangle extends Node {\r\n\r\n  constructor(id: string, position: Vector2, width: number, height: number, public props?: IRectangleProperties) {\r\n\r\n    super(id, position, [\r\n      position.add(-width / 2, -height / 2),\r\n      position.add(width / 2, -height / 2),\r\n      position.add(width / 2, height / 2),\r\n      position.add(-width / 2, height / 2)\r\n    ]);\r\n\r\n    (!props) && (this.props = {});\r\n    if (this.props.outlineColor && typeof (this.props.outlineColor) != 'string') {\r\n      this.props.outlineColor.node = this;\r\n    }\r\n    if (this.props.fillColor && typeof (this.props.fillColor) != 'string') {\r\n      this.props.fillColor.node = this;\r\n    }\r\n  }\r\n\r\n  _render(): void {\r\n    if (this.props) {\r\n      (this.props.outlineColor) && (this.context.strokeStyle = (typeof (this.props.outlineColor) == 'string') ? this.props.outlineColor : this.props.outlineColor.create(this.context));\r\n      (this.props.fillColor) && (this.context.fillStyle = (typeof (this.props.fillColor) == 'string') ? this.props.fillColor : this.props.fillColor.create(this.context));\r\n      (this.props.outlineWidth) && (this.context.lineWidth = this.props.outlineWidth);\r\n      (this.props.outlineDashSegments) && this.context.setLineDash(this.props.outlineDashSegments);\r\n      (this.props.shadowColor) && (this.context.shadowColor = this.props.shadowColor);\r\n      (this.props.shadowBlur) && (this.context.shadowBlur = this.props.shadowBlur);\r\n      if (this.props.shadowOffset) {\r\n        if (!this.props.staticShadow) {\r\n          let shadowOffset = this.props.shadowOffset.transform(this.transform.worldTransform).subtract(this.absolutePosition);\r\n          this.context.shadowOffsetX = shadowOffset.x;\r\n          this.context.shadowOffsetY = shadowOffset.y;\r\n        } else {\r\n          this.context.shadowOffsetX = this.props.shadowOffset.x;\r\n          this.context.shadowOffsetY = this.props.shadowOffset.y;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.context.beginPath();\r\n    this.context.moveTo(this.transform.controlPoints[0].x, this.transform.controlPoints[0].y);\r\n    this.context.lineTo(this.transform.controlPoints[1].x, this.transform.controlPoints[1].y);\r\n    this.context.lineTo(this.transform.controlPoints[2].x, this.transform.controlPoints[2].y);\r\n    this.context.lineTo(this.transform.controlPoints[3].x, this.transform.controlPoints[3].y);\r\n    this.context.lineTo(this.transform.controlPoints[0].x, this.transform.controlPoints[0].y);\r\n    if (this.props.fill) {\r\n      this.context.fill();\r\n    }\r\n    if (this.props.outline || !this.props.fill) {\r\n      this.context.stroke();\r\n    }\r\n  }\r\n\r\n  _offRender(): void {\r\n    (this.props.outlineWidth) && (this.offContext.lineWidth = this.props.outlineWidth);\r\n    this.offContext.strokeStyle = this.hitColor;\r\n    this.offContext.fillStyle = this.hitColor;\r\n\r\n    this.offContext.beginPath();\r\n    this.offContext.moveTo(this.transform.controlPoints[0].x, this.transform.controlPoints[0].y);\r\n    this.offContext.lineTo(this.transform.controlPoints[1].x, this.transform.controlPoints[1].y);\r\n    this.offContext.lineTo(this.transform.controlPoints[2].x, this.transform.controlPoints[2].y);\r\n    this.offContext.lineTo(this.transform.controlPoints[3].x, this.transform.controlPoints[3].y);\r\n    this.offContext.lineTo(this.transform.controlPoints[0].x, this.transform.controlPoints[0].y);\r\n    if (this.props.fill) {\r\n      this.offContext.fill();\r\n    }\r\n    if (this.props.outline || !this.props.fill) {\r\n      this.offContext.stroke();\r\n    }\r\n  }\r\n\r\n  getDimension(): Vector2 {\r\n    return new Vector2(\r\n      Vector2.Distance(this.transform.controlPoints[0], this.transform.controlPoints[1]),\r\n      Vector2.Distance(this.transform.controlPoints[1], this.transform.controlPoints[2])\r\n    );\r\n  }\r\n}\r\n","import { Vector2 } from \"../Math/math\";\r\nimport { LinearGradient, RadialGradient } from \"./view\";\r\nimport { Node } from '../node';\r\n\r\ninterface ITextProperties {\r\n  font?: string,\r\n  outline?: boolean,\r\n  fill?: boolean,\r\n  outlineColor?: string | LinearGradient | RadialGradient,\r\n  fillColor?: string | LinearGradient | RadialGradient,\r\n  outlineWidth?: number,\r\n  shadowColor?: string,\r\n  shadowOffset?: Vector2,\r\n  staticShadow?: boolean,\r\n  shadowBlur?: number\r\n}\r\n\r\nexport class Text extends Node {\r\n\r\n  _text: string;\r\n  _originalWidth: number;\r\n  _originalHeight: number;\r\n\r\n  get text(): string {\r\n    return this._text;\r\n  }\r\n  set text(text: string) {\r\n    this._text = text;\r\n  }\r\n\r\n  constructor(id: string, position: Vector2, text: string, public props?: ITextProperties) {\r\n    super(id, position, []);\r\n\r\n    (!props) && (this.props = {});\r\n    this.text = text;\r\n    if (this.props.outlineColor && typeof (this.props.outlineColor) != 'string') {\r\n      this.props.outlineColor.node = this;\r\n    }\r\n    if (this.props.fillColor && typeof (this.props.fillColor) != 'string') {\r\n      this.props.fillColor.node = this;\r\n    }\r\n\r\n    let textMetricContext = document.createElement('canvas').getContext('2d');\r\n    (this.props.font) && (textMetricContext.font = this.props.font);\r\n    this._originalWidth = textMetricContext.measureText(text).width;\r\n    this._originalHeight = textMetricContext.measureText('M').width;\r\n  }\r\n\r\n  _render(): void {\r\n    if (this.props) {\r\n      (this.props.outlineColor) && (this.context.strokeStyle = (typeof (this.props.outlineColor) == 'string') ? this.props.outlineColor : this.props.outlineColor.create(this.context));\r\n      (this.props.fillColor) && (this.context.fillStyle = (typeof (this.props.fillColor) == 'string') ? this.props.fillColor : this.props.fillColor.create(this.context));\r\n      (this.props.outlineWidth) && (this.context.lineWidth = this.props.outlineWidth);\r\n      (this.props.shadowColor) && (this.context.shadowColor = this.props.shadowColor);\r\n      (this.props.shadowBlur) && (this.context.shadowBlur = this.props.shadowBlur);\r\n      if (this.props.shadowOffset) {\r\n        if (!this.props.staticShadow) {\r\n          let shadowOffset = this.props.shadowOffset.transform(this.transform.worldTransform).subtract(this.absolutePosition);\r\n          this.context.shadowOffsetX = shadowOffset.x;\r\n          this.context.shadowOffsetY = shadowOffset.y;\r\n        } else {\r\n          this.context.shadowOffsetX = this.props.shadowOffset.x;\r\n          this.context.shadowOffsetY = this.props.shadowOffset.y;\r\n        }\r\n      }\r\n      (this.props.font) && (this.context.font = this.props.font);\r\n    }\r\n\r\n    // Rotate image using worldTransform's rotation component\r\n    this.context.translate(this.absolutePosition.x, this.absolutePosition.y);\r\n    this.context.scale(this.scale.x, this.scale.y);\r\n    this.context.rotate(this.transform.worldTransform.getRotation() * (Math.PI / 180));\r\n    this.context.translate(-this.absolutePosition.x, -this.absolutePosition.y);\r\n\r\n    (this.props.outline) && this.context.strokeText(this.text, this.absolutePosition.x - (this._originalWidth / 2), this.absolutePosition.y + (this._originalHeight / 2));\r\n    (this.props.fill || !this.props.outline) && this.context.fillText(this.text, this.absolutePosition.x - (this._originalWidth / 2), this.absolutePosition.y + (this._originalHeight / 2));\r\n  }\r\n\r\n  _offRender(): void {\r\n    this.offContext.fillStyle = this.hitColor;\r\n\r\n    // Rotate image using worldTransform's rotation component\r\n    this.offContext.translate(this.absolutePosition.x, this.absolutePosition.y);\r\n    this.offContext.scale(this.scale.x, this.scale.y);\r\n    this.offContext.rotate(this.transform.worldTransform.getRotation() * (Math.PI / 180));\r\n    this.offContext.translate(-this.absolutePosition.x, -this.absolutePosition.y);\r\n\r\n    this.offContext.fillRect(this.absolutePosition.x - (this._originalWidth / 2), this.absolutePosition.y - (this._originalHeight / 2), (this._originalWidth), (this._originalHeight));\r\n  }\r\n\r\n  getDimension(): Vector2 {\r\n    return new Vector2(Vector2.Distance(this.transform.controlPoints[0], this.transform.controlPoints[1]), 0);\r\n  }\r\n}\r\n","import { Constant } from \"../Math/math\";\r\nimport { Vector2 } from \"../Math/math\";\r\nimport { Handle } from \"../enums\";\r\nimport { Node } from '../node';\r\n\r\nexport * from './ellipse';\r\nexport * from './empty';\r\nexport * from './image';\r\nexport * from './line';\r\nexport * from './polygon';\r\nexport * from './rectangle';\r\nexport * from './text';\r\n\r\nexport class LinearGradient {\r\n\r\n  node: Node;\r\n\r\n  constructor(public offset: Vector2, public degrees: number, public length: number | Handle, public colors: string[], public weights: number[]) { }\r\n\r\n  create(context: CanvasRenderingContext2D): CanvasGradient {\r\n    let gradient: CanvasGradient, from, to, length, delta = new Vector2(0, 0);\r\n\r\n    length = (this.length == Handle.AUTO) ? this.node.getDimension().max() : this.length;\r\n    delta.x = (length / 2) * Math.cos(this.degrees * Constant.TAU);\r\n    delta.y = (length / 2) * Math.sin(this.degrees * Constant.TAU);\r\n\r\n    from = this.offset.subtract(delta).transform(this.node.transform.worldTransform);\r\n    to = this.offset.add(delta).transform(this.node.transform.worldTransform);\r\n\r\n    //Debug.debugLine(this.node.drawing, from, to, {color: 'yellow', width: 2});\r\n\r\n    gradient = context.createLinearGradient(from.x, from.y, to.x, to.y);\r\n    this.colors.forEach((color, index) => {\r\n      gradient.addColorStop(this.weights[index], color);\r\n    });\r\n    return gradient;\r\n  }\r\n}\r\n\r\nexport class RadialGradient {\r\n\r\n  node: Node;\r\n\r\n  constructor(public fromOffset: Vector2, public fromRadius: number | Handle, public toOffset: Vector2, public toRadius: number | Handle, public colors: string[], public weights: number[]) { }\r\n\r\n  create(context: CanvasRenderingContext2D): CanvasGradient {\r\n    let gradient: CanvasGradient;\r\n    let fromCenter = this.fromOffset.transform(this.node.transform.worldTransform);\r\n    let toCenter = this.toOffset.transform(this.node.transform.worldTransform);\r\n    let fromRadius, toRadius;\r\n    if (this.fromRadius == Handle.AUTO || this.toRadius == Handle.AUTO) {\r\n      fromRadius = 1;\r\n      toRadius = this.node.getDimension().max() / 2;\r\n    } else {\r\n      fromRadius = this.fromRadius;\r\n      toRadius = this.toRadius;\r\n    }\r\n\r\n    //Debug.debugPoint(this.node.drawing, fromCenter, {color: 'green', radius: 2});\r\n    //Debug.debugPoint(this.node.drawing, toCenter, {color: 'red', radius: 2});\r\n\r\n    gradient = context.createRadialGradient(fromCenter.x, fromCenter.y, fromRadius, toCenter.x, toCenter.y, toRadius);\r\n    this.colors.forEach((color, index) => {\r\n      gradient.addColorStop(this.weights[index], color);\r\n    });\r\n    return gradient;\r\n  }\r\n}\r\n","import { Drawing } from \"./drawing\";\r\n\r\n/**\r\n * The Canvas object holds an HTMLCanvasElement reference and its 2d context\r\n */\r\nexport class Canvas {\r\n  canvasElement: HTMLCanvasElement;\r\n  context: CanvasRenderingContext2D;\r\n  offCanvasElement: OffscreenCanvas;\r\n  offContext: OffscreenCanvasRenderingContext2D;\r\n\r\n  width: number;\r\n  height: number;\r\n  private drawingHandle: number = -1;\r\n\r\n  /**\r\n   * If no parameters are passed then a new canvas element will be created and appended to `<body>`\r\n   * \r\n   * @param element Reference to an html `<canvas>` or `<div>` element, if a `<div>` element is passed, then a canvas will be created and appended\r\n   * @param width Passing a width will overwrite previously defined canvas width\r\n   * @param height Passing a height will overwrite previously defined canvas height\r\n   */\r\n  constructor(element?: HTMLCanvasElement | HTMLDivElement, width?: number, height?: number) {\r\n    if (!element) {\r\n      this.canvasElement = document.createElement('canvas');\r\n      this.canvasElement.width = document.body.clientWidth;\r\n      this.canvasElement.height = document.body.clientHeight;\r\n      document.body.appendChild(this.canvasElement);\r\n    } else {\r\n      if (element instanceof HTMLDivElement) {\r\n        this.canvasElement = document.createElement('canvas');\r\n        if (width && height) {\r\n          this.canvasElement.width = width;\r\n          this.canvasElement.height = height;\r\n        } else {\r\n          this.canvasElement.width = element.clientWidth;\r\n          this.canvasElement.height = element.clientHeight;\r\n        }\r\n        element.appendChild(this.canvasElement);\r\n      } else {\r\n        this.canvasElement = element;\r\n        if (width && height) {\r\n          this.canvasElement.width = width;\r\n          this.canvasElement.height = height;\r\n        }\r\n      }\r\n    }\r\n    this.width = this.canvasElement.width;\r\n    this.height = this.canvasElement.height;\r\n    this.context = this.canvasElement.getContext('2d');\r\n\r\n    this.offCanvasElement = new OffscreenCanvas(this.width, this.height);\r\n    this.offContext = this.offCanvasElement.getContext('2d');\r\n  }\r\n\r\n  /**\r\n   * Calls render function of `Drawing`\r\n   * \r\n   * @param drawing A `Drawing` object, which will be rendered by this canvas\r\n   */\r\n  draw(drawing: Drawing) {\r\n    if (this.drawingHandle != -1) {\r\n      window.cancelAnimationFrame(this.drawingHandle);\r\n    }\r\n    window.requestAnimationFrame(drawing.render.bind(drawing));\r\n  }\r\n}\r\n","export class Color {\r\n  static Random(): string {\r\n    return ('#' + Math.floor(Math.random() * 16777215).toString(16));\r\n  }\r\n\r\n  static rgbToHex(rgb: number[] | Uint8ClampedArray): string {\r\n    return \"#\" + Color._componentToHex(rgb[0]) + Color._componentToHex(rgb[1]) + Color._componentToHex(rgb[2]);\r\n  }\r\n\r\n  static _componentToHex(c: number) {\r\n    let hex = c.toString(16);\r\n    return hex.length == 1 ? '0' + hex : hex;\r\n  }\r\n}\r\n","import { Drawing, IDebugCall } from \"./drawing\";\r\nimport { Vector2 } from \"./Math/math\";\r\n\r\n/**\r\n * Includes static methods for debugging\r\n */\r\nexport class Debug {\r\n\r\n  /**\r\n   * Will render a filled circle denoting a single point on canvas\r\n   * \r\n   * @param key A unique name for this debug\r\n   * @param drawing Drawing, on which this debug will render\r\n   * @param point The point to render\r\n   * @param props Styling properties for debug\r\n   * @param frames Specifies for how many frames this debug will persist (e.g passing 100 will allow this debug to be rendered for 100 consecutive frames without clearing it from canvas)\r\n   */\r\n  static debugPoint(key: string, drawing: Drawing, point: Vector2, props: { color: string, radius?: number }, frames?: number) {\r\n    Debug.limitDebugCalls(drawing, key, frames);\r\n\r\n    drawing.debugCalls[key].push({\r\n      debugFunction: Debug._debugPoint,\r\n      arguments: [drawing.canvas.context, point.clone(), props]\r\n    });\r\n  }\r\n\r\n  private static _debugPoint(context: CanvasRenderingContext2D, center: Vector2, props: { color: string, radius?: number }) {\r\n    context.fillStyle = props.color;\r\n    context.beginPath();\r\n    context.arc(center.x, center.y, (props.radius) ? props.radius : 2, 0, 2 * Math.PI);\r\n    context.fill();\r\n  }\r\n\r\n  /**\r\n   * Will render a line with green and red dots on start and end co-ordinates of line\r\n   * \r\n   * @param key A unique name for this debug\r\n   * @param drawing Drawing, on which this debug will render\r\n   * @param from Start Vector for this line\r\n   * @param to End Vector point for this line\r\n   * @param props Styling properties for debug\r\n   * @param frames Specifies for how many frames this debug will persist (e.g passing 100 will allow this debug to be rendered for 100 consecutive frames without clearing it from canvas)\r\n   */\r\n  static debugLine(key: string, drawing: Drawing, from: Vector2, to: Vector2, props: { color: string, width?: number }, frames?: number) {\r\n    Debug.limitDebugCalls(drawing, key, frames);\r\n\r\n    drawing.debugCalls[key].push({\r\n      debugFunction: Debug._debugLine,\r\n      arguments: [drawing.canvas.context, from.clone(), to.clone(), props]\r\n    });\r\n  }\r\n\r\n  private static _debugLine(context: CanvasRenderingContext2D, from: Vector2, to: Vector2, props: { color: string, width?: number }) {\r\n    context.strokeStyle = props.color;\r\n    context.lineWidth = (props.width) ? props.width : 1;\r\n    context.beginPath();\r\n    context.moveTo(from.x, from.y);\r\n    context.lineTo(to.x, to.y);\r\n    context.stroke();\r\n\r\n    context.fillStyle = 'green'\r\n    context.beginPath();\r\n    context.arc(from.x, from.y, 2, 0, 2 * Math.PI);\r\n    context.fill();\r\n\r\n    context.fillStyle = 'red';\r\n    context.beginPath();\r\n    context.arc(to.x, to.y, 2, 0, 2 * Math.PI);\r\n    context.fill();\r\n  }\r\n\r\n  /**\r\n   * @hidden\r\n   * \r\n   * Starts debug render calls stored in debugCalls\r\n   */\r\n  static show(debugCalls: IDebugCall, context: CanvasRenderingContext2D) {\r\n    for (let debug in debugCalls) {\r\n      for (let call of debugCalls[debug]) {\r\n        context.save();\r\n        call.debugFunction(...call.arguments);\r\n        context.restore();\r\n      }\r\n    }\r\n  }\r\n\r\n  // Used for persisting the debug calls on canvas (shifts array of debug calls to limit array size to frames)\r\n  private static limitDebugCalls(drawing: Drawing, key: string, frames: number) {\r\n    if (frames && drawing.debugCalls[key] && (frames - 1) < drawing.debugCalls[key].length) {\r\n      drawing.debugCalls[key].shift();\r\n    } else {\r\n      (!drawing.debugCalls[key] || !frames) && (drawing.debugCalls[key] = []);\r\n    }\r\n  }\r\n}\r\n","import { Canvas } from \"./canvas\";\r\nimport { Debug } from \"./debug\";\r\nimport { Vector2 } from \"./Math/math\";\r\nimport { Empty } from \"./View/view\";\r\nimport { Node } from './node';\r\nimport { Color } from \"./color\";\r\n\r\nexport interface IDebugCall {\r\n  [key: string]: {\r\n    debugFunction: Function,\r\n    arguments: any[],\r\n    frames?: number\r\n  }[]\r\n}\r\n\r\n/**\r\n * Stores all views which will be rendered by canvas\r\n */\r\nexport class Drawing {\r\n\r\n  // Scene-graph root node\r\n  private renderTree: Node;\r\n  /**@hidden */\r\n  debugCalls: IDebugCall;\r\n\r\n  colorToNode: { [key: string]: Node };\r\n  mousePos: Vector2;\r\n\r\n  /**\r\n   * \r\n   * @param canvas The Canvas object\r\n   * @param globalUpdate A function that will be called per frame\r\n   */\r\n  constructor(public canvas: Canvas, public globalUpdate?: Function) {\r\n    let rootNode = new Empty('#Root', Vector2.Zero());\r\n    rootNode.context = this.canvas.context;\r\n    rootNode.drawing = this;\r\n    this.renderTree = rootNode;\r\n    this.debugCalls = {}\r\n\r\n    this.mousePos = Vector2.Zero();\r\n    this.colorToNode = {};\r\n    this._registerEvents();\r\n  }\r\n\r\n  _registerEvents(): void {\r\n    let currentHitNode: Node, prevHitNode: Node;\r\n    let isDragging = false;\r\n    let currentDragNode: Node = null;\r\n    let canvasOffset: DOMRect;\r\n\r\n    this.canvas.canvasElement.onmousemove = (ev) => {\r\n      canvasOffset = this.canvas.canvasElement.getBoundingClientRect();\r\n      this.mousePos.x = ev.clientX - canvasOffset.left;\r\n      this.mousePos.y = ev.clientY - canvasOffset.top;\r\n\r\n      currentHitNode = this._getHitNode(this.mousePos);\r\n      if (currentHitNode != prevHitNode) {\r\n        (prevHitNode) && prevHitNode.call('mouseexit');\r\n        (currentHitNode) && currentHitNode.call('mouseenter');\r\n      }\r\n      prevHitNode = currentHitNode;\r\n\r\n      (currentDragNode) && currentDragNode.call('drag', [this.mousePos.clone()]);\r\n    };\r\n\r\n    this.canvas.canvasElement.onmousedown = () => {\r\n      isDragging = true;\r\n      currentDragNode = currentHitNode;\r\n\r\n      let hitNode = this._getHitNode(this.mousePos);\r\n      (hitNode) && hitNode.call('mousedown');\r\n    }\r\n\r\n    this.canvas.canvasElement.onmouseup = () => {\r\n      isDragging = false;\r\n      currentDragNode = null;\r\n\r\n      let hitNode = this._getHitNode(this.mousePos);\r\n      (hitNode) && hitNode.call('mouseup');\r\n    }\r\n\r\n    this.canvas.canvasElement.onclick = () => {\r\n      let hitNode = this._getHitNode(this.mousePos);\r\n      (hitNode) && hitNode.call('click');\r\n    };\r\n\r\n    this.canvas.canvasElement.oncontextmenu = (ev) => {\r\n      ev.preventDefault();\r\n\r\n      let hitNode = this._getHitNode(this.mousePos);\r\n      (hitNode) && hitNode.call('rightclick');\r\n    }\r\n  }\r\n\r\n  _getHitNode(position: Vector2): Node {\r\n    return (\r\n      this.colorToNode[\r\n      Color.rgbToHex(\r\n        this.canvas.offContext.getImageData(position.x, position.y, 1, 1).data\r\n      )\r\n      ]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @hidden\r\n   */\r\n  render() {\r\n    this.canvas.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    this.canvas.offContext.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n    this.renderTree.call('update');\r\n\r\n    (this.globalUpdate) && this.globalUpdate();\r\n\r\n    this.renderTree.transform.childs.forEach((child) => {\r\n      child.updateWorldTransform();\r\n    });\r\n\r\n    this.renderTree.transform.childs.forEach((child) => {\r\n      child.node.render();\r\n    });\r\n\r\n    Debug.show(this.debugCalls, this.canvas.context);\r\n    window.requestAnimationFrame(this.render.bind(this));\r\n  }\r\n\r\n  /**\r\n   * Adds a view object to this drawing\r\n   * \r\n   * @param node A View object to be rendered\r\n   */\r\n  add(node: Node | Node[]): void {\r\n    if (node instanceof Node) {\r\n      node.parent = this.renderTree;\r\n      node.setContext(this.canvas.context, this.canvas.offContext);\r\n      node.setDrawing(this);\r\n      node.setHitColor();\r\n    } else {\r\n      node.forEach((cNode) => {\r\n        cNode.parent = this.renderTree;\r\n        cNode.setContext(this.canvas.context, this.canvas.offContext);\r\n        cNode.setDrawing(this);\r\n        cNode.setHitColor();\r\n      });\r\n    }\r\n  }\r\n\r\n  remove(nodeOrID: Node | string) {\r\n    if (nodeOrID instanceof Node) nodeOrID = nodeOrID.id;\r\n\r\n    let queue = [];\r\n    let currentNode;\r\n    queue.push(this.renderTree);\r\n\r\n    while ((currentNode = queue.shift())) {\r\n      if (currentNode.id == nodeOrID) {\r\n        currentNode.transform.parent.childs.splice(currentNode.transform.parent.childs.indexOf(currentNode.transform), 1);\r\n      } else {\r\n        currentNode.transform.childs.forEach((child) => {\r\n          queue.push(child.node);\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  _debugSceneGraph(root: Node, indent: string): void {\r\n    console.log(indent + root.id + '[' + root.order + ']');\r\n\r\n    root.transform.childs.forEach((child) => {\r\n      this._debugSceneGraph(child.node, ' ' + indent);\r\n    });\r\n  }\r\n}\r\n","export enum Handle {\r\n  AUTO = -1\r\n}\r\n","import { Transform } from './Math/math';\r\nimport { Drawing } from './drawing';\r\nimport { Event } from './event';\r\nimport { Vector2 } from './Math/math';\r\nimport { Color } from './color';\r\n\r\n/**@hidden */\r\nexport abstract class Node implements Event {\r\n\r\n  drawing: Drawing;\r\n  context: CanvasRenderingContext2D;\r\n  offContext: OffscreenCanvasRenderingContext2D;\r\n  transform: Transform;\r\n  registeredEvents: any;\r\n  order: number;\r\n  hitColor: string;\r\n\r\n  abstract _render(): void;\r\n  abstract _offRender(): void;\r\n  abstract getDimension(): Vector2;\r\n\r\n  get zIndex(): number {\r\n    return this.order;\r\n  }\r\n\r\n  set zIndex(zIndex: number) {\r\n    this.order = zIndex;\r\n\r\n    (this.parent) && this.parent.transform.childs.sort((a, b) => {\r\n      return a.node.order - b.node.order;\r\n    });\r\n  }\r\n\r\n  get parent(): Node {\r\n    return this.transform.parent.node;\r\n  }\r\n  set parent(newParent: Node) {\r\n    this.transform.parent = newParent.transform;\r\n  }\r\n\r\n  get childs(): Node[] {\r\n    return this.transform.childs.map((child) => {\r\n      return child.node;\r\n    });\r\n  }\r\n\r\n  get position(): Vector2 {\r\n    return this.transform.position;\r\n  }\r\n  set position(position: Vector2) {\r\n    this.transform.position = position;\r\n  }\r\n  get absolutePosition(): Vector2 {\r\n    return this.transform.absolutePosition;\r\n  }\r\n\r\n  get rotation(): number {\r\n    return this.transform.rotation;\r\n  }\r\n  set rotation(degrees: number) {\r\n    this.transform.rotation = degrees;\r\n  }\r\n\r\n  get localRotation(): number {\r\n    return this.transform.localRotation;\r\n  }\r\n  set localRotation(degrees: number) {\r\n    this.transform.localRotation = degrees;\r\n  }\r\n\r\n  get scale(): Vector2 {\r\n    return this.transform.scale;\r\n  }\r\n  set scale(scale: Vector2) {\r\n    this.transform.scale = scale;\r\n  }\r\n\r\n  constructor(public id: string, position: Vector2, controlPoints: Vector2[]) {\r\n    this.transform = new Transform(position, 0, 0, Vector2.One(), controlPoints, this);\r\n    this.registeredEvents = {};\r\n    this.order = 0;\r\n  }\r\n\r\n  setHitColor() {\r\n    // Set unique color for hit detection in offscreen canvas\r\n    let color: string = Color.Random();\r\n    while (this.drawing.colorToNode[color]) {\r\n      color = Color.Random();\r\n    }\r\n\r\n    this.hitColor = color;\r\n    this.drawing.colorToNode[color] = this;\r\n\r\n    this.transform.childs.forEach((child) => {\r\n      child.node.setHitColor();\r\n    })\r\n  }\r\n\r\n  on(eventKey: string, callback: Function): void {\r\n    this.registeredEvents[eventKey] = callback;\r\n  }\r\n\r\n  render(): void {\r\n    this.context.save();\r\n    this._render();\r\n    this.context.restore();\r\n    this.offRender();\r\n\r\n    for (var child of this.transform.childs) {\r\n      child.node.render();\r\n    }\r\n  }\r\n\r\n  offRender(): void {\r\n    this.offContext.save();\r\n    this._offRender();\r\n    this.offContext.restore();\r\n  }\r\n\r\n  call(method: string, args?: any[]) {\r\n    if (this.registeredEvents[method]) {\r\n      if (args) {\r\n        this.registeredEvents[method](this, ...args);\r\n      } else {\r\n        this.registeredEvents[method](this);\r\n      }\r\n    }\r\n\r\n    for (var child of this.transform.childs) {\r\n      child.node.call(method, args);\r\n    }\r\n  }\r\n\r\n  setContext(context: CanvasRenderingContext2D, offContext: OffscreenCanvasRenderingContext2D) {\r\n    this.context = context;\r\n    this.offContext = offContext;\r\n    this.transform.childs.forEach((child) => {\r\n      child.node.setContext(context, offContext);\r\n    });\r\n  }\r\n\r\n  setDrawing(drawing: Drawing) {\r\n    this.drawing = drawing;\r\n    this.transform.childs.forEach((child) => {\r\n      child.node.setDrawing(drawing);\r\n    });\r\n  }\r\n\r\n\r\n\r\n  dispose(): void {\r\n    this.drawing.remove(this.id);\r\n  }\r\n}\r\n","export * from './enums';\r\nexport * from './drawing';\r\nexport * from './debug';\r\nexport * from './color';\r\nexport * from './canvas';\r\nexport * as View from './View/view';\r\nexport * from './Math/math';","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(229);\n"],"sourceRoot":""}