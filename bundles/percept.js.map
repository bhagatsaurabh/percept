{"version":3,"file":"percept.js","mappings":"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","sources":["webpack://Percept/webpack/universalModuleDefinition","webpack://Percept/./src/common/constants.ts","webpack://Percept/./src/common/enums.ts","webpack://Percept/./src/common/index.ts","webpack://Percept/./src/core/canvas.ts","webpack://Percept/./src/core/color.ts","webpack://Percept/./src/core/debug.ts","webpack://Percept/./src/core/drawing.ts","webpack://Percept/./src/core/index.ts","webpack://Percept/./src/core/node.ts","webpack://Percept/./src/math/dimension.ts","webpack://Percept/./src/math/index.ts","webpack://Percept/./src/math/matrix.ts","webpack://Percept/./src/math/transform.ts","webpack://Percept/./src/math/vector.ts","webpack://Percept/./src/percept.ts","webpack://Percept/./src/view/ellipse.ts","webpack://Percept/./src/view/empty.ts","webpack://Percept/./src/view/image.ts","webpack://Percept/./src/view/index.ts","webpack://Percept/./src/view/line.ts","webpack://Percept/./src/view/linear-gradient.ts","webpack://Percept/./src/view/polygon.ts","webpack://Percept/./src/view/radial-gradient.ts","webpack://Percept/./src/view/rectangle.ts","webpack://Percept/./src/view/text.ts","webpack://Percept/webpack/bootstrap","webpack://Percept/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Percept\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Percept\"] = factory();\n\telse\n\t\troot[\"Percept\"] = factory();\n})(self, () => {\nreturn ","export enum Constant {\r\n  TAU = Math.PI / 180,\r\n}\r\n","export enum Handle {\r\n  AUTO = -1,\r\n}\r\n","export * from \"./enums\";\r\nexport * from \"./constants\";\r\n","import { Drawing } from \"./drawing\";\r\n\r\n/**\r\n * The Canvas object holds an HTMLCanvasElement reference and its 2d context\r\n */\r\nexport class Canvas {\r\n  canvasElement: HTMLCanvasElement;\r\n  context: CanvasRenderingContext2D;\r\n  offCanvasElement: OffscreenCanvas | HTMLCanvasElement;\r\n  offContext: CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D;\r\n\r\n  width: number;\r\n  height: number;\r\n  private frameId: number = 0;\r\n\r\n  /**\r\n   * If no parameters are passed then a new canvas element will be created and appended to `<body>`\r\n   *\r\n   * @param element Reference to an html `<canvas>` or `<div>` element, if a `<div>` element is passed, then a canvas will be created and appended\r\n   * @param width Passing a width will overwrite previously defined canvas width\r\n   * @param height Passing a height will overwrite previously defined canvas height\r\n   */\r\n  constructor(\r\n    element?: HTMLCanvasElement | HTMLDivElement,\r\n    width?: number,\r\n    height?: number\r\n  ) {\r\n    if (!element) {\r\n      this.canvasElement = document.createElement(\"canvas\");\r\n      this.canvasElement.width = document.body.clientWidth;\r\n      this.canvasElement.height = document.body.clientHeight;\r\n      document.body.appendChild(this.canvasElement);\r\n    } else {\r\n      if (element instanceof HTMLDivElement) {\r\n        this.canvasElement = document.createElement(\"canvas\");\r\n        if (width && height) {\r\n          this.canvasElement.width = width;\r\n          this.canvasElement.height = height;\r\n        } else {\r\n          this.canvasElement.width = element.clientWidth;\r\n          this.canvasElement.height = element.clientHeight;\r\n        }\r\n        element.appendChild(this.canvasElement);\r\n      } else {\r\n        this.canvasElement = element;\r\n        if (width && height) {\r\n          this.canvasElement.width = width;\r\n          this.canvasElement.height = height;\r\n        }\r\n      }\r\n    }\r\n    this.width = this.canvasElement.width;\r\n    this.height = this.canvasElement.height;\r\n    this.context = this.canvasElement.getContext(\"2d\");\r\n\r\n    if (typeof OffscreenCanvas !== \"undefined\") {\r\n      this.offCanvasElement = new OffscreenCanvas(this.width, this.height);\r\n      this.offContext = this.offCanvasElement.getContext(\"2d\");\r\n    } else {\r\n      this.offCanvasElement = document.createElement(\"canvas\");\r\n      this.offCanvasElement.width = this.width;\r\n      this.offCanvasElement.height = this.height;\r\n      this.offContext = this.offCanvasElement.getContext(\"2d\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calls render function of `Drawing`\r\n   *\r\n   * @param drawing A `Drawing` object, which will be rendered by this canvas\r\n   */\r\n  draw(drawing: Drawing) {\r\n    this.stop();\r\n    this.render(drawing);\r\n  }\r\n\r\n  /**\r\n   * Stops rendering current Drawing\r\n   */\r\n  stop() {\r\n    window.cancelAnimationFrame(this.frameId);\r\n  }\r\n\r\n  private render(drawing: Drawing) {\r\n    drawing.render();\r\n    if (this.frameId < 0) return;\r\n    this.frameId = window.requestAnimationFrame(\r\n      this.render.bind(this, drawing)\r\n    );\r\n  }\r\n}\r\n","export class Color {\r\n  static Random(): string {\r\n    return \"#\" + Math.floor(Math.random() * 16777215).toString(16);\r\n  }\r\n\r\n  static rgbToHex(rgb: number[] | Uint8ClampedArray): string {\r\n    return (\r\n      \"#\" +\r\n      Color._componentToHex(rgb[0]) +\r\n      Color._componentToHex(rgb[1]) +\r\n      Color._componentToHex(rgb[2])\r\n    );\r\n  }\r\n\r\n  static _componentToHex(c: number) {\r\n    let hex = c.toString(16);\r\n    return hex.length == 1 ? \"0\" + hex : hex;\r\n  }\r\n}\r\n","import { Drawing, IDebugCall } from \".\";\r\nimport { Vector2 } from \"../math/vector\";\r\n\r\n/**\r\n * Includes static methods for debugging\r\n */\r\nexport class Debug {\r\n  /**\r\n   * Will render a filled circle denoting a single point on canvas\r\n   *\r\n   * @param key A unique name for this debug\r\n   * @param drawing Drawing, on which this debug will render\r\n   * @param point The point to render\r\n   * @param props Styling properties for debug\r\n   * @param frames Specifies for how many frames this debug will persist (e.g passing 100 will allow this debug to be rendered for 100 consecutive frames without clearing it from canvas)\r\n   */\r\n  static debugPoint(\r\n    key: string,\r\n    drawing: Drawing,\r\n    point: Vector2,\r\n    props: { color: string; radius?: number },\r\n    frames?: number\r\n  ) {\r\n    Debug.limitDebugCalls(drawing, key, frames);\r\n\r\n    drawing.debugCalls[key].push({\r\n      debugFunction: Debug._debugPoint,\r\n      arguments: [drawing.canvas.context, point.clone(), props],\r\n    });\r\n  }\r\n\r\n  private static _debugPoint(\r\n    context: CanvasRenderingContext2D,\r\n    center: Vector2,\r\n    props: { color: string; radius?: number }\r\n  ) {\r\n    context.fillStyle = props.color;\r\n    context.beginPath();\r\n    context.arc(\r\n      center.x,\r\n      center.y,\r\n      props.radius ? props.radius : 2,\r\n      0,\r\n      2 * Math.PI\r\n    );\r\n    context.fill();\r\n  }\r\n\r\n  /**\r\n   * Will render a line with green and red dots on start and end co-ordinates of line\r\n   *\r\n   * @param key A unique name for this debug\r\n   * @param drawing Drawing, on which this debug will render\r\n   * @param from Start Vector for this line\r\n   * @param to End Vector point for this line\r\n   * @param props Styling properties for debug\r\n   * @param frames Specifies for how many frames this debug will persist (e.g passing 100 will allow this debug to be rendered for 100 consecutive frames without clearing it from canvas)\r\n   */\r\n  static debugLine(\r\n    key: string,\r\n    drawing: Drawing,\r\n    from: Vector2,\r\n    to: Vector2,\r\n    props: { color: string; width?: number },\r\n    frames?: number\r\n  ) {\r\n    Debug.limitDebugCalls(drawing, key, frames);\r\n\r\n    drawing.debugCalls[key].push({\r\n      debugFunction: Debug._debugLine,\r\n      arguments: [drawing.canvas.context, from.clone(), to.clone(), props],\r\n    });\r\n  }\r\n\r\n  private static _debugLine(\r\n    context: CanvasRenderingContext2D,\r\n    from: Vector2,\r\n    to: Vector2,\r\n    props: { color: string; width?: number }\r\n  ) {\r\n    context.strokeStyle = props.color;\r\n    context.lineWidth = props.width ? props.width : 1;\r\n    context.beginPath();\r\n    context.moveTo(from.x, from.y);\r\n    context.lineTo(to.x, to.y);\r\n    context.stroke();\r\n\r\n    context.fillStyle = \"green\";\r\n    context.beginPath();\r\n    context.arc(from.x, from.y, 2, 0, 2 * Math.PI);\r\n    context.fill();\r\n\r\n    context.fillStyle = \"red\";\r\n    context.beginPath();\r\n    context.arc(to.x, to.y, 2, 0, 2 * Math.PI);\r\n    context.fill();\r\n  }\r\n\r\n  /**\r\n   * @hidden\r\n   *\r\n   * Starts debug render calls stored in debugCalls\r\n   */\r\n  static show(debugCalls: IDebugCall, context: CanvasRenderingContext2D) {\r\n    for (let debug in debugCalls) {\r\n      for (let call of debugCalls[debug]) {\r\n        context.save();\r\n        call.debugFunction(...call.arguments);\r\n        context.restore();\r\n      }\r\n    }\r\n  }\r\n\r\n  // Used for persisting the debug calls on canvas (shifts array of debug calls to limit array size to frames)\r\n  private static limitDebugCalls(\r\n    drawing: Drawing,\r\n    key: string,\r\n    frames: number\r\n  ) {\r\n    if (\r\n      frames &&\r\n      drawing.debugCalls[key] &&\r\n      frames - 1 < drawing.debugCalls[key].length\r\n    ) {\r\n      drawing.debugCalls[key].shift();\r\n    } else {\r\n      (!drawing.debugCalls[key] || !frames) && (drawing.debugCalls[key] = []);\r\n    }\r\n  }\r\n}\r\n","import { Canvas, Debug, Node, Color } from \".\";\r\nimport { Vector2 } from \"../math/vector\";\r\nimport { Empty } from \"../view/empty\";\r\n\r\nexport interface IDebugCall {\r\n  [key: string]: {\r\n    debugFunction: Function;\r\n    arguments: any[];\r\n    frames?: number;\r\n  }[];\r\n}\r\n\r\n/**\r\n * Stores all views which will be rendered by canvas\r\n */\r\nexport class Drawing {\r\n  // Scene-graph root node\r\n  private renderTree: Node;\r\n  /**@hidden */\r\n  debugCalls: IDebugCall;\r\n\r\n  colorToNode: { [key: string]: Node };\r\n  mousePos: Vector2;\r\n\r\n  /**\r\n   *\r\n   * @param canvas The Canvas object\r\n   * @param globalUpdate A function that will be called per frame\r\n   */\r\n  constructor(public canvas: Canvas, public globalUpdate?: Function) {\r\n    let rootNode = new Empty(\"#Root\", Vector2.Zero());\r\n    rootNode.context = this.canvas.context;\r\n    rootNode.drawing = this;\r\n    this.renderTree = rootNode;\r\n    this.debugCalls = {};\r\n\r\n    this.mousePos = Vector2.Zero();\r\n    this.colorToNode = {};\r\n    this._registerEvents();\r\n  }\r\n\r\n  _registerEvents(): void {\r\n    let currentHitNode: Node, prevHitNode: Node;\r\n    let currentDragNode: Node = null;\r\n    let canvasOffset: DOMRect;\r\n\r\n    this.canvas.canvasElement.onmousemove = (ev) => {\r\n      canvasOffset = this.canvas.canvasElement.getBoundingClientRect();\r\n      this.mousePos.x = ev.clientX - canvasOffset.left;\r\n      this.mousePos.y = ev.clientY - canvasOffset.top;\r\n\r\n      currentHitNode = this._getHitNode(this.mousePos);\r\n      if (currentHitNode != prevHitNode) {\r\n        prevHitNode && prevHitNode.call(\"mouseexit\");\r\n        currentHitNode && currentHitNode.call(\"mouseenter\");\r\n      }\r\n      prevHitNode = currentHitNode;\r\n\r\n      currentDragNode && currentDragNode.call(\"drag\", [this.mousePos.clone()]);\r\n    };\r\n\r\n    this.canvas.canvasElement.onmousedown = () => {\r\n      currentDragNode = currentHitNode;\r\n\r\n      let hitNode = this._getHitNode(this.mousePos);\r\n      hitNode && hitNode.call(\"mousedown\");\r\n    };\r\n\r\n    this.canvas.canvasElement.onmouseup = () => {\r\n      currentDragNode = null;\r\n\r\n      let hitNode = this._getHitNode(this.mousePos);\r\n      hitNode && hitNode.call(\"mouseup\");\r\n    };\r\n\r\n    this.canvas.canvasElement.onclick = () => {\r\n      let hitNode = this._getHitNode(this.mousePos);\r\n      hitNode && hitNode.call(\"click\");\r\n    };\r\n\r\n    this.canvas.canvasElement.oncontextmenu = (ev) => {\r\n      ev.preventDefault();\r\n\r\n      let hitNode = this._getHitNode(this.mousePos);\r\n      hitNode && hitNode.call(\"rightclick\");\r\n    };\r\n  }\r\n\r\n  _getHitNode(position: Vector2): Node {\r\n    return this.colorToNode[\r\n      Color.rgbToHex(\r\n        this.canvas.offContext.getImageData(position.x, position.y, 1, 1).data\r\n      )\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * @hidden\r\n   */\r\n  render() {\r\n    this.canvas.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    this.canvas.offContext.clearRect(\r\n      0,\r\n      0,\r\n      this.canvas.width,\r\n      this.canvas.height\r\n    );\r\n\r\n    this.renderTree.call(\"update\");\r\n\r\n    this.globalUpdate && this.globalUpdate();\r\n\r\n    this.renderTree.transform.childs.forEach((child) => {\r\n      child.updateWorldTransform();\r\n    });\r\n\r\n    this.renderTree.transform.childs.forEach((child) => {\r\n      child.node.render();\r\n    });\r\n\r\n    Debug.show(this.debugCalls, this.canvas.context);\r\n  }\r\n\r\n  /**\r\n   * Adds a view object to this drawing\r\n   *\r\n   * @param node A View object to be rendered\r\n   */\r\n  add(node: Node | Node[]): void {\r\n    if (node instanceof Node) {\r\n      node.parent = this.renderTree;\r\n      node.setContext(this.canvas.context, this.canvas.offContext);\r\n      node.setDrawing(this);\r\n      node.setHitColor();\r\n    } else {\r\n      node.forEach((cNode) => {\r\n        cNode.parent = this.renderTree;\r\n        cNode.setContext(this.canvas.context, this.canvas.offContext);\r\n        cNode.setDrawing(this);\r\n        cNode.setHitColor();\r\n      });\r\n    }\r\n  }\r\n\r\n  remove(nodeOrID: Node | string) {\r\n    if (nodeOrID instanceof Node) nodeOrID = nodeOrID.id;\r\n\r\n    let queue = [];\r\n    let currentNode;\r\n    queue.push(this.renderTree);\r\n\r\n    while ((currentNode = queue.shift())) {\r\n      if (currentNode.id == nodeOrID) {\r\n        currentNode.transform.parent.childs.splice(\r\n          currentNode.transform.parent.childs.indexOf(currentNode.transform),\r\n          1\r\n        );\r\n      } else {\r\n        currentNode.transform.childs.forEach((child) => {\r\n          queue.push(child.node);\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  _debugSceneGraph(root: Node, indent: string): void {\r\n    console.log(indent + root.id + \"[\" + root.order + \"]\");\r\n\r\n    root.transform.childs.forEach((child) => {\r\n      this._debugSceneGraph(child.node, \" \" + indent);\r\n    });\r\n  }\r\n}\r\n","export * from \"./canvas\";\r\nexport * from \"./color\";\r\nexport * from \"./debug\";\r\nexport * from \"./drawing\";\r\nexport * from \"./event\";\r\nexport * from \"./node\";\r\n","import { Transform, Vector2 } from \"../math\";\r\nimport { Drawing } from \"./drawing\";\r\nimport { Event } from \"./event\";\r\nimport { Color } from \"./color\";\r\n\r\n/**@hidden */\r\nexport abstract class Node implements Event {\r\n  drawing: Drawing;\r\n  context: CanvasRenderingContext2D;\r\n  offContext: CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D;\r\n  transform: Transform;\r\n  registeredEvents: any;\r\n  order: number;\r\n  hitColor: string;\r\n\r\n  abstract _render(): void;\r\n  abstract _offRender(): void;\r\n  abstract getDimension(): Vector2;\r\n\r\n  get zIndex(): number {\r\n    return this.order;\r\n  }\r\n\r\n  set zIndex(zIndex: number) {\r\n    this.order = zIndex;\r\n\r\n    if (this.parent) {\r\n      this.parent.transform.childs.sort((a, b) => {\r\n        return a.node.order - b.node.order;\r\n      });\r\n    }\r\n  }\r\n\r\n  get parent(): Node {\r\n    return this.transform.parent.node;\r\n  }\r\n  set parent(newParent: Node) {\r\n    this.transform.parent = newParent.transform;\r\n  }\r\n\r\n  get childs(): Node[] {\r\n    return this.transform.childs.map((child) => {\r\n      return child.node;\r\n    });\r\n  }\r\n\r\n  get position(): Vector2 {\r\n    return this.transform.position;\r\n  }\r\n  set position(position: Vector2) {\r\n    this.transform.position = position;\r\n  }\r\n  get absolutePosition(): Vector2 {\r\n    return this.transform.absolutePosition;\r\n  }\r\n\r\n  get rotation(): number {\r\n    return this.transform.rotation;\r\n  }\r\n  set rotation(degrees: number) {\r\n    this.transform.rotation = degrees;\r\n  }\r\n\r\n  get localRotation(): number {\r\n    return this.transform.localRotation;\r\n  }\r\n  set localRotation(degrees: number) {\r\n    this.transform.localRotation = degrees;\r\n  }\r\n\r\n  get scale(): Vector2 {\r\n    return this.transform.scale;\r\n  }\r\n  set scale(scale: Vector2) {\r\n    this.transform.scale = scale;\r\n  }\r\n\r\n  constructor(public id: string, position: Vector2, controlPoints: Vector2[]) {\r\n    this.transform = new Transform(\r\n      position,\r\n      0,\r\n      0,\r\n      Vector2.One(),\r\n      controlPoints,\r\n      this\r\n    );\r\n    this.registeredEvents = {};\r\n    this.order = 0;\r\n  }\r\n\r\n  setHitColor() {\r\n    // Set unique color for hit detection in offscreen canvas\r\n    let color: string = Color.Random();\r\n    while (this.drawing.colorToNode[color]) {\r\n      color = Color.Random();\r\n    }\r\n\r\n    this.hitColor = color;\r\n    this.drawing.colorToNode[color] = this;\r\n\r\n    this.transform.childs.forEach((child) => {\r\n      child.node.setHitColor();\r\n    });\r\n  }\r\n\r\n  on(eventKey: string, callback: Function): void {\r\n    this.registeredEvents[eventKey] = callback;\r\n  }\r\n\r\n  render(): void {\r\n    this.context.save();\r\n    this._render();\r\n    this.context.restore();\r\n    this.offRender();\r\n\r\n    for (var child of this.transform.childs) {\r\n      child.node.render();\r\n    }\r\n  }\r\n\r\n  offRender(): void {\r\n    this.offContext.save();\r\n    this._offRender();\r\n    this.offContext.restore();\r\n  }\r\n\r\n  call(method: string, args?: any[]) {\r\n    if (this.registeredEvents[method]) {\r\n      if (args) {\r\n        this.registeredEvents[method](this, ...args);\r\n      } else {\r\n        this.registeredEvents[method](this);\r\n      }\r\n    }\r\n\r\n    for (var child of this.transform.childs) {\r\n      child.node.call(method, args);\r\n    }\r\n  }\r\n\r\n  setContext(\r\n    context: CanvasRenderingContext2D,\r\n    offContext: CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D\r\n  ) {\r\n    this.context = context;\r\n    this.offContext = offContext;\r\n    this.transform.childs.forEach((child) => {\r\n      child.node.setContext(context, offContext);\r\n    });\r\n  }\r\n\r\n  setDrawing(drawing: Drawing) {\r\n    this.drawing = drawing;\r\n    this.transform.childs.forEach((child) => {\r\n      child.node.setDrawing(drawing);\r\n    });\r\n  }\r\n\r\n  dispose(): void {\r\n    this.drawing.remove(this.id);\r\n  }\r\n}\r\n","export class Dimension {\r\n  constructor(public width: number, public height: number) {}\r\n\r\n  max() {\r\n    return Math.max(this.width, this.height);\r\n  }\r\n}\r\n","export * from \"./dimension\";\r\nexport * from \"./matrix\";\r\nexport * from \"./transform\";\r\nexport * from \"./vector\";\r\n","/**\r\n * A 3x3 Matrix\r\n */\r\nexport class Matrix {\r\n  value: number[][];\r\n\r\n  constructor(value: number[][]) {\r\n    this.value = value;\r\n  }\r\n\r\n  private _multiply(another: Matrix | number[][]): number[][] {\r\n    let result;\r\n    if (another instanceof Matrix) {\r\n      result = [...Array(this.value.length)].map(() =>\r\n        Array(another.value[0].length)\r\n      );\r\n\r\n      for (let i = 0; i < this.value.length; i++) {\r\n        for (let j = 0; j < another.value[0].length; j++) {\r\n          let sum = 0;\r\n          for (let k = 0; k < this.value[0].length; k++) {\r\n            sum += this.value[i][k] * another.value[k][j];\r\n          }\r\n          result[i][j] = sum;\r\n        }\r\n      }\r\n    } else {\r\n      result = [...Array(this.value.length)].map(() =>\r\n        Array(another[0].length)\r\n      );\r\n\r\n      for (let i = 0; i < this.value.length; i++) {\r\n        for (let j = 0; j < another[0].length; j++) {\r\n          let sum = 0;\r\n          for (let k = 0; k < this.value[0].length; k++) {\r\n            sum += this.value[i][k] * another[k][j];\r\n          }\r\n          result[i][j] = sum;\r\n        }\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  multiply(another: Matrix | number[][]): Matrix {\r\n    return new Matrix(this._multiply(another));\r\n  }\r\n\r\n  multiplyInPlace(another: Matrix | number[][]): Matrix {\r\n    this.value = this._multiply(another);\r\n    return this;\r\n  }\r\n\r\n  clone() {\r\n    return new Matrix([\r\n      [this.value[0][0], this.value[0][1], this.value[0][2]],\r\n      [this.value[1][0], this.value[1][1], this.value[1][2]],\r\n      [this.value[2][0], this.value[2][1], this.value[2][2]],\r\n    ]);\r\n  }\r\n\r\n  /**\r\n   * Decomposes the rotation component from matrix to get absolute rotation for a child transform\r\n   */\r\n  getRotation(): number {\r\n    return Math.atan2(this.value[0][1], this.value[0][0]) * (180 / Math.PI);\r\n  }\r\n\r\n  static Identity() {\r\n    return new Matrix([\r\n      [1, 0, 0],\r\n      [0, 1, 0],\r\n      [0, 0, 1],\r\n    ]);\r\n  }\r\n\r\n  static Zero() {\r\n    return new Matrix([\r\n      [0, 0, 0],\r\n      [0, 0, 0],\r\n      [0, 0, 0],\r\n    ]);\r\n  }\r\n\r\n  static Multiply(matrix1: number[][], matrix2: number[][]) {\r\n    let result = [...Array(matrix1.length)].map(() => Array(matrix2[0].length));\r\n\r\n    for (let i = 0; i < matrix1.length; i++) {\r\n      for (let j = 0; j < matrix2[0].length; j++) {\r\n        let sum = 0;\r\n        for (let k = 0; k < matrix1[0].length; k++) {\r\n          sum += matrix1[i][k] * matrix2[k][j];\r\n        }\r\n        result[i][j] = sum;\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n}\r\n","import { Matrix, Vector2 } from \".\";\r\nimport { Constant } from \"../common/constants\";\r\nimport { Node } from \"../core/node\";\r\n\r\n// Stores a node's transform (position, rotation, scale)\r\nexport class Transform {\r\n  // reference control points to apply transform to\r\n  refControlPoints: Vector2[];\r\n  // transformed control points\r\n  controlPoints: Vector2[];\r\n  localTrasform: Matrix;\r\n  worldTransform: Matrix;\r\n  _parent: Transform;\r\n  childs: Transform[];\r\n\r\n  get parent(): Transform {\r\n    return this._parent;\r\n  }\r\n  set parent(newParent: Transform) {\r\n    if (this._parent) {\r\n      this._parent.childs.indexOf(this) &&\r\n        this._parent.childs.splice(this._parent.childs.indexOf(this), 1);\r\n    }\r\n    newParent && newParent.childs.push(this);\r\n    this._parent = newParent;\r\n\r\n    if (this.parent) {\r\n      this.parent.childs.sort((a, b) => {\r\n        return a.node.order - b.node.order;\r\n      });\r\n    }\r\n  }\r\n\r\n  get position(): Vector2 {\r\n    return this._position;\r\n  }\r\n  set position(newPosition: Vector2) {\r\n    this._position = newPosition;\r\n  }\r\n\r\n  get absolutePosition(): Vector2 {\r\n    return Vector2.Zero().transform(this.worldTransform);\r\n  }\r\n\r\n  get rotation(): number {\r\n    return this._rotation;\r\n  }\r\n  set rotation(degrees: number) {\r\n    this._rotation = degrees % 360;\r\n  }\r\n\r\n  get localRotation(): number {\r\n    return this._localRotation;\r\n  }\r\n  set localRotation(newRotation: number) {\r\n    this._localRotation = newRotation % 360;\r\n  }\r\n\r\n  get scale(): Vector2 {\r\n    return this._scale;\r\n  }\r\n  set scale(newScale: Vector2) {\r\n    this._scale = newScale;\r\n  }\r\n\r\n  constructor(\r\n    public _position: Vector2,\r\n    public _localRotation: number,\r\n    public _rotation: number,\r\n    public _scale: Vector2,\r\n    controlPoints: Vector2[],\r\n    public node: Node\r\n  ) {\r\n    this._parent = null;\r\n    this.childs = [];\r\n    this.localTrasform = Matrix.Identity();\r\n    this.worldTransform = Matrix.Identity();\r\n    this.refControlPoints = this.relativeControlPoints(controlPoints);\r\n    this.controlPoints = [...controlPoints];\r\n  }\r\n\r\n  private relativeControlPoints(controlPoints: Vector2[]): Vector2[] {\r\n    let result: Vector2[] = [];\r\n    controlPoints.forEach((controlPoint) => {\r\n      result.push(controlPoint.subtract(this.position));\r\n    });\r\n    return result;\r\n  }\r\n\r\n  // Updates this node's worldTransform using parent's worldTransform if any\r\n  updateWorldTransform(parentWorldTransform?: Matrix) {\r\n    // Set translation\r\n    this.localTrasform.value = [\r\n      [1, 0, 0],\r\n      [0, 1, 0],\r\n      [this.position.x, this.position.y, 1],\r\n    ];\r\n\r\n    let cos;\r\n    let sin;\r\n    // Transform rotation\r\n    if (this.parent.node.id != \"#Root\") {\r\n      cos = Math.cos(this.rotation * Constant.TAU);\r\n      sin = Math.sin(this.rotation * Constant.TAU);\r\n\r\n      this.localTrasform = new Matrix([\r\n        [1, 0, 0],\r\n        [0, 1, 0],\r\n        [this.position.x, this.position.y, 1],\r\n      ])\r\n        .multiply([\r\n          [cos, sin, 0],\r\n          [-sin, cos, 0],\r\n          [0, 0, 1],\r\n        ])\r\n        .multiply([\r\n          [1, 0, 0],\r\n          [0, 1, 0],\r\n          [-this.position.x, -this.position.y, 1],\r\n        ])\r\n        .multiply(this.localTrasform);\r\n    }\r\n\r\n    // Transform localRotation\r\n    cos = Math.cos(this.localRotation * Constant.TAU);\r\n    sin = Math.sin(this.localRotation * Constant.TAU);\r\n    this.localTrasform = new Matrix([\r\n      [cos, sin, 0],\r\n      [-sin, cos, 0],\r\n      [0, 0, 1],\r\n    ]).multiply(this.localTrasform);\r\n\r\n    // Transform scale\r\n    this.localTrasform = new Matrix([\r\n      [this.scale.x, 0, 0],\r\n      [0, this.scale.y, 0],\r\n      [0, 0, 1],\r\n    ]).multiply(this.localTrasform);\r\n\r\n    if (parentWorldTransform) {\r\n      this.worldTransform = this.localTrasform.multiply(parentWorldTransform);\r\n    } else {\r\n      this.worldTransform = this.localTrasform.clone();\r\n    }\r\n\r\n    this.childs.forEach((child) => {\r\n      child.updateWorldTransform(this.worldTransform);\r\n    });\r\n\r\n    this.applyTransform();\r\n  }\r\n\r\n  // Transforms each control point using this node's worldTransform\r\n  private applyTransform() {\r\n    this.refControlPoints.forEach((controlPoint, index) => {\r\n      this.controlPoints[index] = controlPoint.transform(this.worldTransform);\r\n    });\r\n  }\r\n}\r\n","import { Canvas } from \"../core/canvas\";\r\nimport { Constant } from \"../common/constants\";\r\nimport { Matrix } from \"../math/matrix\";\r\n\r\n/**\r\n * Stores 2D Vector\r\n */\r\nexport class Vector2 {\r\n  tmpX: number;\r\n  tmpY: number;\r\n\r\n  constructor(public x: number, public y: number) {}\r\n\r\n  toString() {\r\n    return \"[\" + this.x.toFixed(3) + \", \" + this.y.toFixed(3) + \"]\";\r\n  }\r\n\r\n  add(arg1: number | Vector2, arg2?: number): Vector2 {\r\n    // Params : (vector2d) or (x, y)\r\n    if (arg1 instanceof Vector2) {\r\n      return new Vector2(this.x + arg1.x, this.y + arg1.y);\r\n    } else if (typeof arg2 === \"undefined\") {\r\n      return new Vector2(this.x + arg1, this.y + arg1);\r\n    } else {\r\n      return new Vector2(this.x + arg1, this.y + arg2);\r\n    }\r\n  }\r\n\r\n  addInPlace(arg1: number | Vector2, arg2?: number): Vector2 {\r\n    // Params : (vector2d) or (x, y)\r\n    if (arg1 instanceof Vector2) {\r\n      this.x += arg1.x;\r\n      this.y += arg1.y;\r\n    } else if (!arg2) {\r\n      this.x += arg1;\r\n      this.y += arg1;\r\n    } else {\r\n      this.x += arg1;\r\n      this.y += arg2;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  multiply(arg1: number | Vector2, arg2?: number): Vector2 {\r\n    // Params : (vector2d) or (x, y)\r\n    if (arg1 instanceof Vector2) {\r\n      return new Vector2(this.x * arg1.x, this.y * arg1.y);\r\n    } else {\r\n      return new Vector2(this.x * arg1, this.y * arg2);\r\n    }\r\n  }\r\n\r\n  multiplyInPlace(arg1: number | Vector2, arg2?: number): Vector2 {\r\n    // Params : (vector2d) or (x, y)\r\n    if (arg1 instanceof Vector2) {\r\n      this.x *= arg1.x;\r\n      this.y *= arg1.y;\r\n    } else if (!arg2) {\r\n      this.x *= arg1;\r\n      this.y *= arg1;\r\n    } else {\r\n      this.x *= arg1;\r\n      this.y *= arg2;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  subtract(arg1: number | Vector2, arg2?: number): Vector2 {\r\n    // Params : (vector2d) or (x, y)\r\n    if (arg1 instanceof Vector2) {\r\n      return new Vector2(this.x - arg1.x, this.y - arg1.y);\r\n    } else {\r\n      return new Vector2(this.x - arg1, this.y - arg2);\r\n    }\r\n  }\r\n\r\n  subtractInPlace(arg1: number | Vector2, arg2?: number): void {\r\n    // Params : (vector2d) or (x, y)\r\n    if (arg1 instanceof Vector2) {\r\n      this.x -= arg1.x;\r\n      this.y -= arg1.y;\r\n    } else {\r\n      this.x -= arg1;\r\n      this.y -= arg2;\r\n    }\r\n  }\r\n\r\n  rotate(pivot: Vector2, degrees: number): Vector2 {\r\n    degrees = degrees * Constant.TAU;\r\n    let cosT = Math.cos(degrees);\r\n    let sinT = Math.sin(degrees);\r\n    return new Vector2(\r\n      cosT * (this.x - pivot.x) - sinT * (this.y - pivot.y) + pivot.x,\r\n      sinT * (this.x - pivot.x) + cosT * (this.y - pivot.y) + pivot.y\r\n    );\r\n  }\r\n\r\n  rotateInPlace(pivot: Vector2, degrees: number): Vector2 {\r\n    degrees = degrees * Constant.TAU;\r\n    let cosT = Math.cos(degrees);\r\n    let sinT = Math.sin(degrees);\r\n    this.tmpX = cosT * (this.x - pivot.x) - sinT * (this.y - pivot.y) + pivot.x;\r\n    this.tmpY = sinT * (this.x - pivot.x) + cosT * (this.y - pivot.y) + pivot.y;\r\n    this.x = this.tmpX;\r\n    this.y = this.tmpY;\r\n    return this;\r\n  }\r\n\r\n  max() {\r\n    return Math.max(this.x, this.y);\r\n  }\r\n\r\n  transform(matrix: Matrix) {\r\n    let result = Matrix.Multiply([[this.x, this.y, 1]], matrix.value);\r\n    return new Vector2(result[0][0], result[0][1]);\r\n  }\r\n\r\n  transformInPlace(matrix: Matrix) {\r\n    let result = Matrix.Multiply([[this.x, this.y, 1]], matrix.value);\r\n    this.x = result[0][0];\r\n    this.y = result[0][1];\r\n  }\r\n\r\n  static Midpoint(vector1: Vector2, vector2: Vector2): Vector2 {\r\n    return new Vector2(\r\n      (vector1.x + vector2.x) / 2,\r\n      (vector1.y + vector2.y) / 2\r\n    );\r\n  }\r\n\r\n  static Distance(vector1: Vector2, vector2: Vector2): number {\r\n    return Math.sqrt(\r\n      Math.pow(vector2.x - vector1.x, 2) + Math.pow(vector2.y - vector1.y, 2)\r\n    );\r\n  }\r\n\r\n  static Zero(): Vector2 {\r\n    return new Vector2(0, 0);\r\n  }\r\n\r\n  static One(): Vector2 {\r\n    return new Vector2(1, 1);\r\n  }\r\n\r\n  static Bounds(vectors: Vector2[]): Vector2[] {\r\n    let minVec = new Vector2(Number.MAX_VALUE, Number.MAX_VALUE);\r\n    let maxVec = new Vector2(Number.MIN_VALUE, Number.MIN_VALUE);\r\n\r\n    vectors.forEach((vector) => {\r\n      if (vector.x < minVec.x) minVec.x = vector.x;\r\n      if (vector.y < minVec.y) minVec.y = vector.y;\r\n      if (vector.x > maxVec.x) maxVec.x = vector.x;\r\n      if (vector.y > maxVec.y) maxVec.y = vector.y;\r\n    });\r\n    return [minVec, maxVec];\r\n  }\r\n\r\n  static Average(vectors: Vector2[]): Vector2 {\r\n    let sumX = 0;\r\n    let sumY = 0;\r\n    vectors.forEach((vector) => {\r\n      sumX += vector.x;\r\n      sumY += vector.y;\r\n    });\r\n    return new Vector2(sumX / vectors.length, sumY / vectors.length);\r\n  }\r\n\r\n  static Random(\r\n    minXOrCanvas: number | Canvas,\r\n    maxX?: number,\r\n    minY?: number,\r\n    maxY?: number\r\n  ): Vector2 {\r\n    if (minXOrCanvas instanceof Canvas) {\r\n      return new Vector2(\r\n        Math.random() * minXOrCanvas.width,\r\n        Math.random() * minXOrCanvas.height\r\n      );\r\n    } else {\r\n      return new Vector2(\r\n        Math.random() * (maxX - minXOrCanvas) + minXOrCanvas,\r\n        Math.random() * (maxY - minY) + minY\r\n      );\r\n    }\r\n  }\r\n\r\n  static Lerp(start: Vector2, end: Vector2, amount: number): Vector2 {\r\n    return new Vector2(\r\n      start.x + (end.x - start.x) * amount,\r\n      start.y + (end.y - start.y) * amount\r\n    );\r\n  }\r\n\r\n  clone(): Vector2 {\r\n    return new Vector2(this.x, this.y);\r\n  }\r\n}\r\n","export * from \"./common\";\r\nexport * as View from \"./view\";\r\nexport * from \"./core\";\r\nexport * from \"./math\";\r\n","import { Vector2 } from \"../math/vector\";\r\nimport { LinearGradient, RadialGradient } from \".\";\r\nimport { Node } from \"../core/node\";\r\n\r\ninterface IEllipseProperties {\r\n  outline?: boolean;\r\n  fill?: boolean;\r\n  outlineColor?: string | LinearGradient | RadialGradient;\r\n  fillColor?: string | LinearGradient | RadialGradient;\r\n  outlineWidth?: number;\r\n  outlineDashSegments?: number[];\r\n  shadowColor?: string;\r\n  shadowOffset?: Vector2;\r\n  staticShadow?: boolean;\r\n  shadowBlur?: number;\r\n}\r\n\r\nexport class Ellipse extends Node {\r\n  constructor(\r\n    id: string,\r\n    position: Vector2,\r\n    public minor: number,\r\n    public major: number,\r\n    public props?: IEllipseProperties\r\n  ) {\r\n    super(id, position, [\r\n      position.subtract(0, minor),\r\n      position.add(major, 0),\r\n      position.add(0, minor),\r\n      position.subtract(major, 0),\r\n    ]);\r\n\r\n    !props && (this.props = {});\r\n    if (this.props.outlineColor && typeof this.props.outlineColor != \"string\") {\r\n      this.props.outlineColor.node = this;\r\n    }\r\n    if (this.props.fillColor && typeof this.props.fillColor != \"string\") {\r\n      this.props.fillColor.node = this;\r\n    }\r\n  }\r\n\r\n  _render(): void {\r\n    if (this.props) {\r\n      this.props.outlineColor &&\r\n        (this.context.strokeStyle =\r\n          typeof this.props.outlineColor == \"string\"\r\n            ? this.props.outlineColor\r\n            : this.props.outlineColor.create(this.context));\r\n      this.props.fillColor &&\r\n        (this.context.fillStyle =\r\n          typeof this.props.fillColor == \"string\"\r\n            ? this.props.fillColor\r\n            : this.props.fillColor.create(this.context));\r\n      this.props.outlineWidth &&\r\n        (this.context.lineWidth = this.props.outlineWidth);\r\n      this.props.outlineDashSegments &&\r\n        this.context.setLineDash(this.props.outlineDashSegments);\r\n      this.props.shadowColor &&\r\n        (this.context.shadowColor = this.props.shadowColor);\r\n      this.props.shadowBlur &&\r\n        (this.context.shadowBlur = this.props.shadowBlur);\r\n      if (this.props.shadowOffset) {\r\n        if (!this.props.staticShadow) {\r\n          let shadowOffset = this.props.shadowOffset\r\n            .transform(this.transform.worldTransform)\r\n            .subtract(this.absolutePosition);\r\n          this.context.shadowOffsetX = shadowOffset.x;\r\n          this.context.shadowOffsetY = shadowOffset.y;\r\n        } else {\r\n          this.context.shadowOffsetX = this.props.shadowOffset.x;\r\n          this.context.shadowOffsetY = this.props.shadowOffset.y;\r\n        }\r\n      }\r\n    }\r\n\r\n    let position = this.absolutePosition;\r\n    this.context.beginPath();\r\n    if (this.minor == this.major) {\r\n      this.context.arc(position.x, position.y, this.minor, 0, 2 * Math.PI);\r\n    } else {\r\n      this.context.ellipse(\r\n        position.x,\r\n        position.y,\r\n        this.major,\r\n        this.minor,\r\n        Math.atan2(\r\n          this.transform.controlPoints[1].y - position.y,\r\n          this.transform.controlPoints[1].x - position.x\r\n        ),\r\n        0,\r\n        2 * Math.PI\r\n      );\r\n    }\r\n    if (this.props.fill) {\r\n      this.context.fill();\r\n    }\r\n    if (this.props.outline || !this.props.fill) {\r\n      this.context.stroke();\r\n    }\r\n  }\r\n\r\n  _offRender(): void {\r\n    this.props.outlineWidth &&\r\n      (this.offContext.lineWidth = this.props.outlineWidth);\r\n    this.offContext.strokeStyle = this.hitColor;\r\n    this.offContext.fillStyle = this.hitColor;\r\n\r\n    let position = this.absolutePosition;\r\n    this.offContext.beginPath();\r\n    if (this.minor == this.major) {\r\n      this.offContext.arc(position.x, position.y, this.minor, 0, 2 * Math.PI);\r\n    } else {\r\n      this.offContext.ellipse(\r\n        position.x,\r\n        position.y,\r\n        this.major,\r\n        this.minor,\r\n        Math.atan2(\r\n          this.transform.controlPoints[1].y - position.y,\r\n          this.transform.controlPoints[1].x - position.x\r\n        ),\r\n        0,\r\n        2 * Math.PI\r\n      );\r\n    }\r\n    if (this.props.fill) {\r\n      this.offContext.fill();\r\n    }\r\n    if (this.props.outline || !this.props.fill) {\r\n      this.offContext.stroke();\r\n    }\r\n  }\r\n\r\n  getDimension(): Vector2 {\r\n    return new Vector2(\r\n      Vector2.Distance(\r\n        this.transform.controlPoints[1],\r\n        this.transform.controlPoints[3]\r\n      ),\r\n      Vector2.Distance(\r\n        this.transform.controlPoints[0],\r\n        this.transform.controlPoints[2]\r\n      )\r\n    );\r\n  }\r\n}\r\n","import { Vector2 } from \"../math/vector\";\r\nimport { Node } from \"../core/node\";\r\n\r\nexport class Empty extends Node {\r\n  constructor(id: string, position: Vector2) {\r\n    super(id, position, []);\r\n  }\r\n\r\n  _render(): void {\r\n    /**/\r\n  }\r\n  _offRender(): void {\r\n    /**/\r\n  }\r\n\r\n  getDimension(): Vector2 {\r\n    return Vector2.Zero();\r\n  }\r\n}\r\n","import { Vector2 } from \"../math/vector\";\r\nimport { Node } from \"../core/node\";\r\n\r\ninterface IImageProperties {\r\n  shadowColor?: string;\r\n  shadowOffset?: Vector2;\r\n  staticShadow?: boolean;\r\n  shadowBlur?: number;\r\n}\r\n\r\nexport class Image extends Node {\r\n  _source: HTMLImageElement;\r\n\r\n  constructor(\r\n    id: string,\r\n    position: Vector2,\r\n    source: string | HTMLImageElement,\r\n    public width: number,\r\n    public height: number,\r\n    public props?: IImageProperties\r\n  ) {\r\n    super(id, position, []);\r\n\r\n    !props && (this.props = {});\r\n    if (typeof source == \"string\") {\r\n      this._source = new window.Image();\r\n      this._source.src = source;\r\n    } else {\r\n      this._source = source;\r\n    }\r\n    this._source.crossOrigin = \"Anonymous\";\r\n  }\r\n\r\n  _render(): void {\r\n    if (this.props) {\r\n      this.props.shadowColor &&\r\n        (this.context.shadowColor = this.props.shadowColor);\r\n      this.props.shadowBlur &&\r\n        (this.context.shadowBlur = this.props.shadowBlur);\r\n      if (this.props.shadowOffset) {\r\n        if (!this.props.staticShadow) {\r\n          let shadowOffset = this.props.shadowOffset\r\n            .transform(this.transform.worldTransform)\r\n            .subtract(this.absolutePosition);\r\n          this.context.shadowOffsetX = shadowOffset.x;\r\n          this.context.shadowOffsetY = shadowOffset.y;\r\n        } else {\r\n          this.context.shadowOffsetX = this.props.shadowOffset.x;\r\n          this.context.shadowOffsetY = this.props.shadowOffset.y;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Rotate image using worldTransform's rotation component\r\n    this.context.translate(this.absolutePosition.x, this.absolutePosition.y);\r\n    this.context.rotate(\r\n      this.transform.worldTransform.getRotation() * (Math.PI / 180)\r\n    );\r\n    this.context.translate(-this.absolutePosition.x, -this.absolutePosition.y);\r\n\r\n    let topLeft = this.absolutePosition.subtract(\r\n      (this.width * this.transform.scale.x) / 2,\r\n      (this.height * this.transform.scale.y) / 2\r\n    );\r\n    this.context.drawImage(\r\n      this._source,\r\n      topLeft.x,\r\n      topLeft.y,\r\n      this.width * this.transform.scale.x,\r\n      this.height * this.transform.scale.y\r\n    );\r\n  }\r\n\r\n  _offRender(): void {\r\n    this.offContext.fillStyle = this.hitColor;\r\n\r\n    // Rotate bounding-rectangle using worldTransform's rotation component\r\n    this.offContext.translate(this.absolutePosition.x, this.absolutePosition.y);\r\n    this.offContext.rotate(\r\n      this.transform.worldTransform.getRotation() * (Math.PI / 180)\r\n    );\r\n    this.offContext.translate(\r\n      -this.absolutePosition.x,\r\n      -this.absolutePosition.y\r\n    );\r\n\r\n    let topLeft = this.absolutePosition.subtract(\r\n      (this.width * this.transform.scale.x) / 2,\r\n      (this.height * this.transform.scale.y) / 2\r\n    );\r\n    this.offContext.fillRect(\r\n      topLeft.x,\r\n      topLeft.y,\r\n      this.width * this.transform.scale.x,\r\n      this.height * this.transform.scale.y\r\n    );\r\n  }\r\n\r\n  getDimension(): Vector2 {\r\n    return new Vector2(this.width, this.height);\r\n  }\r\n}\r\n","export * from \"./ellipse\";\r\nexport * from \"./empty\";\r\nexport * from \"./image\";\r\nexport * from \"./line\";\r\nexport * from \"./polygon\";\r\nexport * from \"./rectangle\";\r\nexport * from \"./text\";\r\nexport * from \"./linear-gradient\";\r\nexport * from \"./radial-gradient\";\r\n","import { Vector2 } from \"../math/vector\";\r\nimport { LinearGradient, RadialGradient } from \".\";\r\nimport { Node } from \"../core/node\";\r\n\r\ninterface ILineProperties {\r\n  color?: string | LinearGradient | RadialGradient;\r\n  lineWidth?: number;\r\n  lineCap?: CanvasLineCap;\r\n  lineDashSegments?: number[];\r\n  shadowColor?: string;\r\n  shadowOffset?: Vector2;\r\n  staticShadow?: boolean;\r\n  shadowBlur?: number;\r\n}\r\n\r\nexport class Line extends Node {\r\n  get from(): Vector2 {\r\n    if (this._from instanceof Node) return this._from.absolutePosition;\r\n    else return this.transform.controlPoints[0];\r\n  }\r\n  get to(): Vector2 {\r\n    if (this._to instanceof Node) return this._to.absolutePosition;\r\n    else return this.transform.controlPoints[1];\r\n  }\r\n\r\n  constructor(\r\n    id: string,\r\n    public _from: Vector2 | Node,\r\n    public _to: Vector2 | Node,\r\n    pivot?: number,\r\n    public props?: ILineProperties\r\n  ) {\r\n    super(\r\n      id,\r\n      _from instanceof Vector2 && _to instanceof Vector2\r\n        ? pivot\r\n          ? _from.add((_to.x - _from.x) * pivot, (_to.y - _from.y) * pivot)\r\n          : _from.clone()\r\n        : Vector2.Zero(),\r\n      _from instanceof Vector2 && _to instanceof Vector2 ? [_from, _to] : []\r\n    );\r\n\r\n    !props && (this.props = {});\r\n    if (this.props.color && typeof this.props.color != \"string\") {\r\n      this.props.color.node = this;\r\n    }\r\n  }\r\n\r\n  _render(): void {\r\n    if (this.props) {\r\n      this.props.color &&\r\n        (this.context.strokeStyle =\r\n          typeof this.props.color == \"string\"\r\n            ? this.props.color\r\n            : this.props.color.create(this.context));\r\n      this.props.lineWidth && (this.context.lineWidth = this.props.lineWidth);\r\n      this.props.lineCap && (this.context.lineCap = this.props.lineCap);\r\n      this.props.lineDashSegments &&\r\n        this.context.setLineDash(this.props.lineDashSegments);\r\n      this.props.shadowColor &&\r\n        (this.context.shadowColor = this.props.shadowColor);\r\n      this.props.shadowBlur &&\r\n        (this.context.shadowBlur = this.props.shadowBlur);\r\n      if (this.props.shadowOffset) {\r\n        if (!this.props.staticShadow) {\r\n          let shadowOffset = this.props.shadowOffset\r\n            .transform(this.transform.worldTransform)\r\n            .subtract(this.absolutePosition);\r\n          this.context.shadowOffsetX = shadowOffset.x;\r\n          this.context.shadowOffsetY = shadowOffset.y;\r\n        } else {\r\n          this.context.shadowOffsetX = this.props.shadowOffset.x;\r\n          this.context.shadowOffsetY = this.props.shadowOffset.y;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.context.beginPath();\r\n    this.context.moveTo(this.from.x, this.from.y);\r\n    this.context.lineTo(this.to.x, this.to.y);\r\n    this.context.stroke();\r\n  }\r\n\r\n  _offRender(): void {\r\n    this.props.lineWidth && (this.offContext.lineWidth = this.props.lineWidth);\r\n    this.offContext.strokeStyle = this.hitColor;\r\n\r\n    this.offContext.beginPath();\r\n    this.offContext.moveTo(this.from.x, this.from.y);\r\n    this.offContext.lineTo(this.to.x, this.to.y);\r\n    this.offContext.stroke();\r\n  }\r\n\r\n  getDimension(): Vector2 {\r\n    return new Vector2(\r\n      Vector2.Distance(\r\n        this.transform.controlPoints[0],\r\n        this.transform.controlPoints[1]\r\n      ),\r\n      0\r\n    );\r\n  }\r\n}\r\n","import { Constant, Handle } from \"../common\";\r\nimport { Node } from \"../core/node\";\r\nimport { Vector2 } from \"../math/vector\";\r\n\r\nexport class LinearGradient {\r\n  node: Node;\r\n\r\n  constructor(\r\n    public offset: Vector2,\r\n    public degrees: number,\r\n    public length: number | Handle,\r\n    public colors: string[],\r\n    public weights: number[]\r\n  ) {}\r\n\r\n  create(context: CanvasRenderingContext2D): CanvasGradient {\r\n    let gradient: CanvasGradient,\r\n      from,\r\n      to,\r\n      length,\r\n      delta = new Vector2(0, 0);\r\n\r\n    length =\r\n      this.length == Handle.AUTO ? this.node.getDimension().max() : this.length;\r\n    delta.x = (length / 2) * Math.cos(this.degrees * Constant.TAU);\r\n    delta.y = (length / 2) * Math.sin(this.degrees * Constant.TAU);\r\n\r\n    from = this.offset\r\n      .subtract(delta)\r\n      .transform(this.node.transform.worldTransform);\r\n    to = this.offset.add(delta).transform(this.node.transform.worldTransform);\r\n\r\n    gradient = context.createLinearGradient(from.x, from.y, to.x, to.y);\r\n    this.colors.forEach((color, index) => {\r\n      gradient.addColorStop(this.weights[index], color);\r\n    });\r\n    return gradient;\r\n  }\r\n}\r\n","import { Vector2 } from \"../math/vector\";\r\nimport { LinearGradient, RadialGradient } from \".\";\r\nimport { Node } from \"../core/node\";\r\nimport { Handle } from \"../common/enums\";\r\n\r\ninterface IPolygonProperties {\r\n  outline?: boolean;\r\n  fill?: boolean;\r\n  outlineColor?: string | LinearGradient | RadialGradient;\r\n  fillColor?: string | LinearGradient | RadialGradient;\r\n  outlineWidth?: number;\r\n  outlineDashSegments?: number[];\r\n  shadowColor?: string;\r\n  shadowOffset?: Vector2;\r\n  staticShadow?: boolean;\r\n  shadowBlur?: number;\r\n}\r\n\r\nexport class Polygon extends Node {\r\n  constructor(\r\n    id: string,\r\n    vertices: Vector2[],\r\n    center: Vector2 | Handle,\r\n    public props?: IPolygonProperties\r\n  ) {\r\n    super(\r\n      id,\r\n      center instanceof Vector2 ? center : Vector2.Average(vertices),\r\n      vertices\r\n    );\r\n\r\n    !props && (this.props = {});\r\n    if (this.props.outlineColor && typeof this.props.outlineColor != \"string\") {\r\n      this.props.outlineColor.node = this;\r\n    }\r\n    if (this.props.fillColor && typeof this.props.fillColor != \"string\") {\r\n      this.props.fillColor.node = this;\r\n    }\r\n  }\r\n\r\n  _render(): void {\r\n    if (this.props) {\r\n      this.props.outlineColor &&\r\n        (this.context.strokeStyle =\r\n          typeof this.props.outlineColor == \"string\"\r\n            ? this.props.outlineColor\r\n            : this.props.outlineColor.create(this.context));\r\n      this.props.fillColor &&\r\n        (this.context.fillStyle =\r\n          typeof this.props.fillColor == \"string\"\r\n            ? this.props.fillColor\r\n            : this.props.fillColor.create(this.context));\r\n      this.props.outlineWidth &&\r\n        (this.context.lineWidth = this.props.outlineWidth);\r\n      this.props.outlineDashSegments &&\r\n        this.context.setLineDash(this.props.outlineDashSegments);\r\n      this.props.shadowColor &&\r\n        (this.context.shadowColor = this.props.shadowColor);\r\n      this.props.shadowBlur &&\r\n        (this.context.shadowBlur = this.props.shadowBlur);\r\n      if (this.props.shadowOffset) {\r\n        if (!this.props.staticShadow) {\r\n          let shadowOffset = this.props.shadowOffset\r\n            .transform(this.transform.worldTransform)\r\n            .subtract(this.absolutePosition);\r\n          this.context.shadowOffsetX = shadowOffset.x;\r\n          this.context.shadowOffsetY = shadowOffset.y;\r\n        } else {\r\n          this.context.shadowOffsetX = this.props.shadowOffset.x;\r\n          this.context.shadowOffsetY = this.props.shadowOffset.y;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.context.beginPath();\r\n    this.context.moveTo(\r\n      this.transform.controlPoints[0].x,\r\n      this.transform.controlPoints[0].y\r\n    );\r\n    for (let index = 1; index < this.transform.controlPoints.length; index++) {\r\n      this.context.lineTo(\r\n        this.transform.controlPoints[index].x,\r\n        this.transform.controlPoints[index].y\r\n      );\r\n    }\r\n    this.context.closePath();\r\n\r\n    if (this.props.fill) {\r\n      this.context.fill();\r\n    }\r\n    if (this.props.outline || !this.props.fill) {\r\n      this.context.stroke();\r\n    }\r\n  }\r\n\r\n  _offRender(): void {\r\n    this.props.outlineWidth &&\r\n      (this.offContext.lineWidth = this.props.outlineWidth);\r\n    this.offContext.strokeStyle = this.hitColor;\r\n    this.offContext.fillStyle = this.hitColor;\r\n\r\n    this.offContext.beginPath();\r\n    this.offContext.moveTo(\r\n      this.transform.controlPoints[0].x,\r\n      this.transform.controlPoints[0].y\r\n    );\r\n    for (let index = 1; index < this.transform.controlPoints.length; index++) {\r\n      this.offContext.lineTo(\r\n        this.transform.controlPoints[index].x,\r\n        this.transform.controlPoints[index].y\r\n      );\r\n    }\r\n    this.offContext.closePath();\r\n\r\n    if (this.props.fill) {\r\n      this.offContext.fill();\r\n    }\r\n    if (this.props.outline || !this.props.fill) {\r\n      this.offContext.stroke();\r\n    }\r\n  }\r\n\r\n  getDimension(): Vector2 {\r\n    let bounds = Vector2.Bounds(this.transform.controlPoints);\r\n\r\n    return new Vector2(\r\n      Math.abs(bounds[0].x - bounds[1].x),\r\n      Math.abs(bounds[0].y - bounds[1].y)\r\n    );\r\n  }\r\n}\r\n","import { Vector2 } from \"../math/vector\";\r\nimport { Handle } from \"../common/enums\";\r\nimport { Node } from \"../core/node\";\r\n\r\nexport class RadialGradient {\r\n  node: Node;\r\n\r\n  constructor(\r\n    public fromOffset: Vector2,\r\n    public fromRadius: number | Handle,\r\n    public toOffset: Vector2,\r\n    public toRadius: number | Handle,\r\n    public colors: string[],\r\n    public weights: number[]\r\n  ) {}\r\n\r\n  create(context: CanvasRenderingContext2D): CanvasGradient {\r\n    let gradient: CanvasGradient;\r\n    let fromCenter = this.fromOffset.transform(\r\n      this.node.transform.worldTransform\r\n    );\r\n    let toCenter = this.toOffset.transform(this.node.transform.worldTransform);\r\n    let fromRadius, toRadius;\r\n    if (this.fromRadius == Handle.AUTO || this.toRadius == Handle.AUTO) {\r\n      fromRadius = 1;\r\n      toRadius = this.node.getDimension().max() / 2;\r\n    } else {\r\n      fromRadius = this.fromRadius;\r\n      toRadius = this.toRadius;\r\n    }\r\n\r\n    gradient = context.createRadialGradient(\r\n      fromCenter.x,\r\n      fromCenter.y,\r\n      fromRadius,\r\n      toCenter.x,\r\n      toCenter.y,\r\n      toRadius\r\n    );\r\n    this.colors.forEach((color, index) => {\r\n      gradient.addColorStop(this.weights[index], color);\r\n    });\r\n    return gradient;\r\n  }\r\n}\r\n","import { Vector2 } from \"../math/vector\";\r\nimport { LinearGradient, RadialGradient } from \".\";\r\nimport { Node } from \"../core/node\";\r\n\r\ninterface IRectangleProperties {\r\n  outline?: boolean;\r\n  fill?: boolean;\r\n  outlineColor?: string | LinearGradient | RadialGradient;\r\n  fillColor?: string | LinearGradient | RadialGradient;\r\n  outlineWidth?: number;\r\n  outlineDashSegments?: number[];\r\n  shadowColor?: string;\r\n  shadowOffset?: Vector2;\r\n  staticShadow?: boolean;\r\n  shadowBlur?: number;\r\n}\r\n\r\nexport class Rectangle extends Node {\r\n  constructor(\r\n    id: string,\r\n    position: Vector2,\r\n    width: number,\r\n    height: number,\r\n    public props?: IRectangleProperties\r\n  ) {\r\n    super(id, position, [\r\n      position.add(-width / 2, -height / 2),\r\n      position.add(width / 2, -height / 2),\r\n      position.add(width / 2, height / 2),\r\n      position.add(-width / 2, height / 2),\r\n    ]);\r\n\r\n    !props && (this.props = {});\r\n    if (this.props.outlineColor && typeof this.props.outlineColor != \"string\") {\r\n      this.props.outlineColor.node = this;\r\n    }\r\n    if (this.props.fillColor && typeof this.props.fillColor != \"string\") {\r\n      this.props.fillColor.node = this;\r\n    }\r\n  }\r\n\r\n  _render(): void {\r\n    if (this.props) {\r\n      this.props.outlineColor &&\r\n        (this.context.strokeStyle =\r\n          typeof this.props.outlineColor == \"string\"\r\n            ? this.props.outlineColor\r\n            : this.props.outlineColor.create(this.context));\r\n      this.props.fillColor &&\r\n        (this.context.fillStyle =\r\n          typeof this.props.fillColor == \"string\"\r\n            ? this.props.fillColor\r\n            : this.props.fillColor.create(this.context));\r\n      this.props.outlineWidth &&\r\n        (this.context.lineWidth = this.props.outlineWidth);\r\n      this.props.outlineDashSegments &&\r\n        this.context.setLineDash(this.props.outlineDashSegments);\r\n      this.props.shadowColor &&\r\n        (this.context.shadowColor = this.props.shadowColor);\r\n      this.props.shadowBlur &&\r\n        (this.context.shadowBlur = this.props.shadowBlur);\r\n      if (this.props.shadowOffset) {\r\n        if (!this.props.staticShadow) {\r\n          let shadowOffset = this.props.shadowOffset\r\n            .transform(this.transform.worldTransform)\r\n            .subtract(this.absolutePosition);\r\n          this.context.shadowOffsetX = shadowOffset.x;\r\n          this.context.shadowOffsetY = shadowOffset.y;\r\n        } else {\r\n          this.context.shadowOffsetX = this.props.shadowOffset.x;\r\n          this.context.shadowOffsetY = this.props.shadowOffset.y;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.context.beginPath();\r\n    this.context.moveTo(\r\n      this.transform.controlPoints[0].x,\r\n      this.transform.controlPoints[0].y\r\n    );\r\n    this.context.lineTo(\r\n      this.transform.controlPoints[1].x,\r\n      this.transform.controlPoints[1].y\r\n    );\r\n    this.context.lineTo(\r\n      this.transform.controlPoints[2].x,\r\n      this.transform.controlPoints[2].y\r\n    );\r\n    this.context.lineTo(\r\n      this.transform.controlPoints[3].x,\r\n      this.transform.controlPoints[3].y\r\n    );\r\n    this.context.lineTo(\r\n      this.transform.controlPoints[0].x,\r\n      this.transform.controlPoints[0].y\r\n    );\r\n    if (this.props.fill) {\r\n      this.context.fill();\r\n    }\r\n    if (this.props.outline || !this.props.fill) {\r\n      this.context.stroke();\r\n    }\r\n  }\r\n\r\n  _offRender(): void {\r\n    this.props.outlineWidth &&\r\n      (this.offContext.lineWidth = this.props.outlineWidth);\r\n    this.offContext.strokeStyle = this.hitColor;\r\n    this.offContext.fillStyle = this.hitColor;\r\n\r\n    this.offContext.beginPath();\r\n    this.offContext.moveTo(\r\n      this.transform.controlPoints[0].x,\r\n      this.transform.controlPoints[0].y\r\n    );\r\n    this.offContext.lineTo(\r\n      this.transform.controlPoints[1].x,\r\n      this.transform.controlPoints[1].y\r\n    );\r\n    this.offContext.lineTo(\r\n      this.transform.controlPoints[2].x,\r\n      this.transform.controlPoints[2].y\r\n    );\r\n    this.offContext.lineTo(\r\n      this.transform.controlPoints[3].x,\r\n      this.transform.controlPoints[3].y\r\n    );\r\n    this.offContext.lineTo(\r\n      this.transform.controlPoints[0].x,\r\n      this.transform.controlPoints[0].y\r\n    );\r\n    if (this.props.fill) {\r\n      this.offContext.fill();\r\n    }\r\n    if (this.props.outline || !this.props.fill) {\r\n      this.offContext.stroke();\r\n    }\r\n  }\r\n\r\n  getDimension(): Vector2 {\r\n    return new Vector2(\r\n      Vector2.Distance(\r\n        this.transform.controlPoints[0],\r\n        this.transform.controlPoints[1]\r\n      ),\r\n      Vector2.Distance(\r\n        this.transform.controlPoints[1],\r\n        this.transform.controlPoints[2]\r\n      )\r\n    );\r\n  }\r\n}\r\n","import { Vector2 } from \"../math/vector\";\r\nimport { LinearGradient, RadialGradient } from \".\";\r\nimport { Node } from \"../core/node\";\r\n\r\ninterface ITextProperties {\r\n  font?: string;\r\n  outline?: boolean;\r\n  fill?: boolean;\r\n  outlineColor?: string | LinearGradient | RadialGradient;\r\n  fillColor?: string | LinearGradient | RadialGradient;\r\n  outlineWidth?: number;\r\n  shadowColor?: string;\r\n  shadowOffset?: Vector2;\r\n  staticShadow?: boolean;\r\n  shadowBlur?: number;\r\n}\r\n\r\nexport class Text extends Node {\r\n  _text: string;\r\n  _originalWidth: number;\r\n  _originalHeight: number;\r\n\r\n  get text(): string {\r\n    return this._text;\r\n  }\r\n  set text(text: string) {\r\n    this._text = text;\r\n  }\r\n\r\n  constructor(\r\n    id: string,\r\n    position: Vector2,\r\n    text: string,\r\n    public props?: ITextProperties\r\n  ) {\r\n    super(id, position, []);\r\n\r\n    !props && (this.props = {});\r\n    this.text = text;\r\n    if (this.props.outlineColor && typeof this.props.outlineColor != \"string\") {\r\n      this.props.outlineColor.node = this;\r\n    }\r\n    if (this.props.fillColor && typeof this.props.fillColor != \"string\") {\r\n      this.props.fillColor.node = this;\r\n    }\r\n\r\n    let textMetricContext = document.createElement(\"canvas\").getContext(\"2d\");\r\n    this.props.font && (textMetricContext.font = this.props.font);\r\n    this._originalWidth = textMetricContext.measureText(text).width;\r\n    this._originalHeight = textMetricContext.measureText(\"M\").width;\r\n  }\r\n\r\n  _render(): void {\r\n    if (this.props) {\r\n      this.props.outlineColor &&\r\n        (this.context.strokeStyle =\r\n          typeof this.props.outlineColor == \"string\"\r\n            ? this.props.outlineColor\r\n            : this.props.outlineColor.create(this.context));\r\n      this.props.fillColor &&\r\n        (this.context.fillStyle =\r\n          typeof this.props.fillColor == \"string\"\r\n            ? this.props.fillColor\r\n            : this.props.fillColor.create(this.context));\r\n      this.props.outlineWidth &&\r\n        (this.context.lineWidth = this.props.outlineWidth);\r\n      this.props.shadowColor &&\r\n        (this.context.shadowColor = this.props.shadowColor);\r\n      this.props.shadowBlur &&\r\n        (this.context.shadowBlur = this.props.shadowBlur);\r\n      if (this.props.shadowOffset) {\r\n        if (!this.props.staticShadow) {\r\n          let shadowOffset = this.props.shadowOffset\r\n            .transform(this.transform.worldTransform)\r\n            .subtract(this.absolutePosition);\r\n          this.context.shadowOffsetX = shadowOffset.x;\r\n          this.context.shadowOffsetY = shadowOffset.y;\r\n        } else {\r\n          this.context.shadowOffsetX = this.props.shadowOffset.x;\r\n          this.context.shadowOffsetY = this.props.shadowOffset.y;\r\n        }\r\n      }\r\n      this.props.font && (this.context.font = this.props.font);\r\n    }\r\n\r\n    // Rotate image using worldTransform's rotation component\r\n    this.context.translate(this.absolutePosition.x, this.absolutePosition.y);\r\n    this.context.scale(this.scale.x, this.scale.y);\r\n    this.context.rotate(\r\n      this.transform.worldTransform.getRotation() * (Math.PI / 180)\r\n    );\r\n    this.context.translate(-this.absolutePosition.x, -this.absolutePosition.y);\r\n\r\n    this.props.outline &&\r\n      this.context.strokeText(\r\n        this.text,\r\n        this.absolutePosition.x - this._originalWidth / 2,\r\n        this.absolutePosition.y + this._originalHeight / 2\r\n      );\r\n    (this.props.fill || !this.props.outline) &&\r\n      this.context.fillText(\r\n        this.text,\r\n        this.absolutePosition.x - this._originalWidth / 2,\r\n        this.absolutePosition.y + this._originalHeight / 2\r\n      );\r\n  }\r\n\r\n  _offRender(): void {\r\n    this.offContext.fillStyle = this.hitColor;\r\n\r\n    // Rotate image using worldTransform's rotation component\r\n    this.offContext.translate(this.absolutePosition.x, this.absolutePosition.y);\r\n    this.offContext.scale(this.scale.x, this.scale.y);\r\n    this.offContext.rotate(\r\n      this.transform.worldTransform.getRotation() * (Math.PI / 180)\r\n    );\r\n    this.offContext.translate(\r\n      -this.absolutePosition.x,\r\n      -this.absolutePosition.y\r\n    );\r\n\r\n    this.offContext.fillRect(\r\n      this.absolutePosition.x - this._originalWidth / 2,\r\n      this.absolutePosition.y - this._originalHeight / 2,\r\n      this._originalWidth,\r\n      this._originalHeight\r\n    );\r\n  }\r\n\r\n  getDimension(): Vector2 {\r\n    return new Vector2(\r\n      Vector2.Distance(\r\n        this.transform.controlPoints[0],\r\n        this.transform.controlPoints[1]\r\n      ),\r\n      0\r\n    );\r\n  }\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(229);\n"],"names":["root","factory","exports","module","define","amd","self","Constant","Math","PI","Handle","element","width","height","frameId","HTMLDivElement","this","canvasElement","document","createElement","clientWidth","clientHeight","appendChild","body","context","getContext","OffscreenCanvas","offCanvasElement","offContext","draw","drawing","stop","render","window","cancelAnimationFrame","requestAnimationFrame","bind","Canvas","Random","floor","random","toString","rgbToHex","rgb","Color","_componentToHex","c","hex","length","debugPoint","key","point","props","frames","Debug","limitDebugCalls","debugCalls","push","debugFunction","_debugPoint","arguments","canvas","clone","center","fillStyle","color","beginPath","arc","x","y","radius","fill","debugLine","from","to","_debugLine","strokeStyle","lineWidth","moveTo","lineTo","stroke","show","debug","call","save","restore","shift","globalUpdate","rootNode","Empty","Vector2","Zero","renderTree","mousePos","colorToNode","_registerEvents","currentHitNode","prevHitNode","canvasOffset","currentDragNode","onmousemove","ev","getBoundingClientRect","clientX","left","clientY","top","_getHitNode","onmousedown","hitNode","onmouseup","onclick","oncontextmenu","preventDefault","position","getImageData","data","clearRect","transform","childs","forEach","child","updateWorldTransform","node","add","Node","parent","setContext","setDrawing","setHitColor","cNode","remove","nodeOrID","id","currentNode","queue","splice","indexOf","_debugSceneGraph","indent","console","log","order","Drawing","controlPoints","Transform","One","registeredEvents","zIndex","sort","a","b","newParent","map","absolutePosition","rotation","degrees","localRotation","scale","hitColor","on","eventKey","callback","_render","offRender","_offRender","method","args","dispose","max","Dimension","value","_multiply","another","result","Matrix","Array","i","j","sum","k","multiply","multiplyInPlace","getRotation","atan2","Identity","Multiply","matrix1","matrix2","_position","_localRotation","_rotation","_scale","_parent","localTrasform","worldTransform","refControlPoints","relativeControlPoints","newPosition","newRotation","newScale","controlPoint","subtract","parentWorldTransform","cos","sin","TAU","applyTransform","index","toFixed","arg1","arg2","addInPlace","subtractInPlace","rotate","pivot","cosT","sinT","rotateInPlace","tmpX","tmpY","matrix","transformInPlace","Midpoint","vector1","vector2","Distance","sqrt","pow","Bounds","vectors","minVec","Number","MAX_VALUE","maxVec","MIN_VALUE","vector","Average","sumX","sumY","minXOrCanvas","maxX","minY","maxY","Lerp","start","end","amount","minor","major","outlineColor","fillColor","create","outlineWidth","outlineDashSegments","setLineDash","shadowColor","shadowBlur","shadowOffset","staticShadow","shadowOffsetX","shadowOffsetY","ellipse","outline","getDimension","Ellipse","source","_source","Image","src","crossOrigin","translate","topLeft","drawImage","fillRect","_from","_to","lineCap","lineDashSegments","Line","offset","colors","weights","gradient","delta","AUTO","createLinearGradient","addColorStop","LinearGradient","vertices","closePath","bounds","abs","Polygon","fromOffset","fromRadius","toOffset","toRadius","fromCenter","toCenter","createRadialGradient","RadialGradient","Rectangle","text","textMetricContext","font","_originalWidth","measureText","_originalHeight","_text","strokeText","fillText","Text","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}