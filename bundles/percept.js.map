{"version":3,"file":"percept.js","mappings":"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","sources":["webpack://Percept/webpack/universalModuleDefinition","webpack://Percept/./src/Math/constants.ts","webpack://Percept/./src/Math/dimension.ts","webpack://Percept/./src/Math/math.ts","webpack://Percept/./src/Math/matrix.ts","webpack://Percept/./src/Math/transform.ts","webpack://Percept/./src/Math/vector.ts","webpack://Percept/./src/View/ellipse.ts","webpack://Percept/./src/View/empty.ts","webpack://Percept/./src/View/image.ts","webpack://Percept/./src/View/line.ts","webpack://Percept/./src/View/polygon.ts","webpack://Percept/./src/View/rectangle.ts","webpack://Percept/./src/View/text.ts","webpack://Percept/./src/View/view.ts","webpack://Percept/./src/canvas.ts","webpack://Percept/./src/color.ts","webpack://Percept/./src/debug.ts","webpack://Percept/./src/drawing.ts","webpack://Percept/./src/enums.ts","webpack://Percept/./src/node.ts","webpack://Percept/./src/percept.ts","webpack://Percept/webpack/bootstrap","webpack://Percept/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Percept\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Percept\"] = factory();\n\telse\n\t\troot[\"Percept\"] = factory();\n})(self, () => {\nreturn ","/**@hidden */\r\n\r\nexport enum Constant {\r\n  TAU = (Math.PI / 180)\r\n}\r\n","/**@hidden */\r\n\r\nexport class Dimension {\r\n  constructor(public width: number, public height: number) { }\r\n\r\n  max() {\r\n    return Math.max(this.width, this.height);\r\n  }\r\n}\r\n","export * from './constants';\r\nexport * from './dimension';\r\nexport * from './matrix';\r\nexport * from './transform';\r\nexport * from './vector';\r\n","/**\r\n * A 3x3 Matrix\r\n */\r\nexport class Matrix {\r\n  value: number[][];\r\n\r\n  constructor(value: number[][]) {\r\n    this.value = value;\r\n  }\r\n\r\n  multiply(another: Matrix | number[][]): Matrix {\r\n    let result;\r\n    if (another instanceof Matrix) {\r\n      result = [...Array(this.value.length)].map(() => Array(another.value[0].length));\r\n\r\n      for (let i = 0; i < this.value.length; i++) {\r\n        for (let j = 0; j < another.value[0].length; j++) {\r\n          let sum = 0;\r\n          for (let k = 0; k < this.value[0].length; k++) {\r\n            sum += this.value[i][k] * another.value[k][j];\r\n          }\r\n          result[i][j] = sum;\r\n        }\r\n      }\r\n    } else {\r\n      result = [...Array(this.value.length)].map(() => Array(another[0].length));\r\n\r\n      for (let i = 0; i < this.value.length; i++) {\r\n        for (let j = 0; j < another[0].length; j++) {\r\n          let sum = 0;\r\n          for (let k = 0; k < this.value[0].length; k++) {\r\n            sum += this.value[i][k] * another[k][j];\r\n          }\r\n          result[i][j] = sum;\r\n        }\r\n      }\r\n    }\r\n\r\n    return new Matrix(result);\r\n  }\r\n\r\n  multiplyInPlace(another: Matrix | number[][]): Matrix {\r\n    let result;\r\n    if (another instanceof Matrix) {\r\n      result = [...Array(this.value.length)].map(() => Array(another.value[0].length));\r\n\r\n      for (let i = 0; i < this.value.length; i++) {\r\n        for (let j = 0; j < another.value[0].length; j++) {\r\n          let sum = 0;\r\n          for (let k = 0; k < this.value[0].length; k++) {\r\n            sum += this.value[i][k] * another.value[k][j];\r\n          }\r\n          result[i][j] = sum;\r\n        }\r\n      }\r\n    } else {\r\n      result = [...Array(this.value.length)].map(() => Array(another[0].length));\r\n\r\n      for (let i = 0; i < this.value.length; i++) {\r\n        for (let j = 0; j < another[0].length; j++) {\r\n          let sum = 0;\r\n          for (let k = 0; k < this.value[0].length; k++) {\r\n            sum += this.value[i][k] * another[k][j];\r\n          }\r\n          result[i][j] = sum;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.value = result;\r\n    return this;\r\n  }\r\n\r\n  clone() {\r\n    return new Matrix([\r\n      [this.value[0][0], this.value[0][1], this.value[0][2]],\r\n      [this.value[1][0], this.value[1][1], this.value[1][2]],\r\n      [this.value[2][0], this.value[2][1], this.value[2][2]]\r\n    ]);\r\n  }\r\n\r\n  /**\r\n   * Decomposes the rotation component from matrix to get absolute rotation for a child transform\r\n   */\r\n  getRotation(): number {\r\n    return Math.atan2(this.value[0][1], this.value[0][0]) * (180 / Math.PI);\r\n  }\r\n\r\n  static Identity() {\r\n    return new Matrix([[1, 0, 0], [0, 1, 0], [0, 0, 1]]);\r\n  }\r\n\r\n  static Zero() {\r\n    return new Matrix([[0, 0, 0], [0, 0, 0], [0, 0, 0]]);\r\n  }\r\n\r\n  static Multiply(matrix1: number[][], matrix2: number[][]) {\r\n    let result = [...Array(matrix1.length)].map(() => Array(matrix2[0].length));\r\n\r\n    for (let i = 0; i < matrix1.length; i++) {\r\n      for (let j = 0; j < matrix2[0].length; j++) {\r\n        let sum = 0;\r\n        for (let k = 0; k < matrix1[0].length; k++) {\r\n          sum += matrix1[i][k] * matrix2[k][j];\r\n        }\r\n        result[i][j] = sum;\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n}\r\n","/**@hidden */\r\n\r\nimport { Constant, Matrix, Vector2 } from \"./math\";\r\nimport { Node } from \"../node\";\r\n\r\n// Stores a node's transform (position, rotation, scale)\r\nexport class Transform {\r\n  // reference control points to apply transform to\r\n  refControlPoints: Vector2[];\r\n  // transformed control points\r\n  controlPoints: Vector2[];\r\n  localTrasform: Matrix;\r\n  worldTransform: Matrix;\r\n  _parent: Transform;\r\n  childs: Transform[];\r\n\r\n  get parent(): Transform {\r\n    return this._parent;\r\n  }\r\n  set parent(newParent: Transform) {\r\n    if (this._parent) {\r\n      this._parent.childs.indexOf(this) &&\r\n        this._parent.childs.splice(this._parent.childs.indexOf(this), 1);\r\n    }\r\n    newParent && newParent.childs.push(this);\r\n    this._parent = newParent;\r\n\r\n    if (this.parent) {\r\n      this.parent.childs.sort((a, b) => {\r\n        return a.node.order - b.node.order;\r\n      });\r\n    }\r\n  }\r\n\r\n  get position(): Vector2 {\r\n    return this._position;\r\n  }\r\n  set position(newPosition: Vector2) {\r\n    this._position = newPosition;\r\n  }\r\n\r\n  get absolutePosition(): Vector2 {\r\n    return Vector2.Zero().transform(this.worldTransform);\r\n  }\r\n\r\n  get rotation(): number {\r\n    return this._rotation;\r\n  }\r\n  set rotation(degrees: number) {\r\n    this._rotation = degrees % 360;\r\n  }\r\n\r\n  get localRotation(): number {\r\n    return this._localRotation;\r\n  }\r\n  set localRotation(newRotation: number) {\r\n    this._localRotation = newRotation % 360;\r\n  }\r\n\r\n  get scale(): Vector2 {\r\n    return this._scale;\r\n  }\r\n  set scale(newScale: Vector2) {\r\n    this._scale = newScale;\r\n  }\r\n\r\n  constructor(\r\n    public _position: Vector2,\r\n    public _localRotation: number,\r\n    public _rotation: number,\r\n    public _scale: Vector2,\r\n    controlPoints: Vector2[],\r\n    public node: Node\r\n  ) {\r\n    this._parent = null;\r\n    this.childs = [];\r\n    this.localTrasform = Matrix.Identity();\r\n    this.worldTransform = Matrix.Identity();\r\n    this.refControlPoints = this.relativeControlPoints(controlPoints);\r\n    this.controlPoints = [...controlPoints];\r\n  }\r\n\r\n  private relativeControlPoints(controlPoints: Vector2[]): Vector2[] {\r\n    let result: Vector2[] = [];\r\n    controlPoints.forEach((controlPoint) => {\r\n      result.push(controlPoint.subtract(this.position));\r\n    });\r\n    return result;\r\n  }\r\n\r\n  // Updates this node's worldTransform using parent's worldTransform if any\r\n  updateWorldTransform(parentWorldTransform?: Matrix) {\r\n    // Set translation\r\n    this.localTrasform.value = [\r\n      [1, 0, 0],\r\n      [0, 1, 0],\r\n      [this.position.x, this.position.y, 1],\r\n    ];\r\n\r\n    let cos;\r\n    let sin;\r\n    // Transform rotation\r\n    if (this.parent.node.id != \"#Root\") {\r\n      cos = Math.cos(this.rotation * Constant.TAU);\r\n      sin = Math.sin(this.rotation * Constant.TAU);\r\n\r\n      this.localTrasform = new Matrix([\r\n        [1, 0, 0],\r\n        [0, 1, 0],\r\n        [this.position.x, this.position.y, 1],\r\n      ])\r\n        .multiply([\r\n          [cos, sin, 0],\r\n          [-sin, cos, 0],\r\n          [0, 0, 1],\r\n        ])\r\n        .multiply([\r\n          [1, 0, 0],\r\n          [0, 1, 0],\r\n          [-this.position.x, -this.position.y, 1],\r\n        ])\r\n        .multiply(this.localTrasform);\r\n    }\r\n\r\n    // Transform localRotation\r\n    cos = Math.cos(this.localRotation * Constant.TAU);\r\n    sin = Math.sin(this.localRotation * Constant.TAU);\r\n    this.localTrasform = new Matrix([\r\n      [cos, sin, 0],\r\n      [-sin, cos, 0],\r\n      [0, 0, 1],\r\n    ]).multiply(this.localTrasform);\r\n\r\n    // Transform scale\r\n    this.localTrasform = new Matrix([\r\n      [this.scale.x, 0, 0],\r\n      [0, this.scale.y, 0],\r\n      [0, 0, 1],\r\n    ]).multiply(this.localTrasform);\r\n\r\n    if (parentWorldTransform) {\r\n      this.worldTransform = this.localTrasform.multiply(parentWorldTransform);\r\n    } else {\r\n      this.worldTransform = this.localTrasform.clone();\r\n    }\r\n\r\n    this.childs.forEach((child) => {\r\n      child.updateWorldTransform(this.worldTransform);\r\n    });\r\n\r\n    this.applyTransform();\r\n  }\r\n\r\n  // Transforms each control point using this node's worldTransform\r\n  private applyTransform() {\r\n    this.refControlPoints.forEach((controlPoint, index) => {\r\n      this.controlPoints[index] = controlPoint.transform(this.worldTransform);\r\n    });\r\n  }\r\n}\r\n","import { Canvas } from \"../canvas\";\r\nimport { Constant, Matrix } from \"./math\";\r\n\r\n/**\r\n * Stores 2D Vector\r\n */\r\nexport class Vector2 {\r\n\r\n  tmpX: number;\r\n  tmpY: number;\r\n\r\n  constructor(public x: number, public y: number) { }\r\n\r\n  toString() {\r\n    return '[' + this.x.toFixed(3) + ', ' + this.y.toFixed(3) + ']';\r\n  }\r\n\r\n  add(arg1: number | Vector2, arg2?: number): Vector2 {\r\n    // Params : (vector2d) or (x, y)\r\n    if (arg1 instanceof Vector2) {\r\n      return new Vector2(this.x + arg1.x, this.y + arg1.y);\r\n    } else if (typeof arg2 === 'undefined') {\r\n      return new Vector2(this.x + arg1, this.y + arg1);\r\n    } else {\r\n      return new Vector2(this.x + arg1, this.y + arg2);\r\n    }\r\n  }\r\n\r\n  addInPlace(arg1: number | Vector2, arg2?: number): Vector2 {\r\n    // Params : (vector2d) or (x, y)\r\n    if (arg1 instanceof Vector2) {\r\n      this.x += arg1.x;\r\n      this.y += arg1.y;\r\n    } else if (!arg2) {\r\n      this.x += arg1;\r\n      this.y += arg1;\r\n    } else {\r\n      this.x += arg1;\r\n      this.y += arg2;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  multiply(arg1: number | Vector2, arg2?: number): Vector2 {\r\n    // Params : (vector2d) or (x, y)\r\n    if (arg1 instanceof Vector2) {\r\n      return new Vector2(this.x * arg1.x, this.y * arg1.y);\r\n    } else {\r\n      return new Vector2(this.x * arg1, this.y * arg2);\r\n    }\r\n  }\r\n\r\n  multiplyInPlace(arg1: number | Vector2, arg2?: number): Vector2 {\r\n    // Params : (vector2d) or (x, y)\r\n    if (arg1 instanceof Vector2) {\r\n      this.x *= arg1.x;\r\n      this.y *= arg1.y;\r\n    } else if (!arg2) {\r\n      this.x *= arg1;\r\n      this.y *= arg1;\r\n    } else {\r\n      this.x *= arg1;\r\n      this.y *= arg2;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  subtract(arg1: number | Vector2, arg2?: number): Vector2 {\r\n    // Params : (vector2d) or (x, y)\r\n    if (arg1 instanceof Vector2) {\r\n      return new Vector2(this.x - arg1.x, this.y - arg1.y);\r\n    } else {\r\n      return new Vector2(this.x - arg1, this.y - arg2);\r\n    }\r\n  }\r\n\r\n  subtractInPlace(arg1: number | Vector2, arg2?: number): void {\r\n    // Params : (vector2d) or (x, y)\r\n    if (arg1 instanceof Vector2) {\r\n      this.x -= arg1.x;\r\n      this.y -= arg1.y;\r\n    } else {\r\n      this.x -= arg1;\r\n      this.y -= arg2;\r\n    }\r\n  }\r\n\r\n  rotate(pivot: Vector2, degrees: number): Vector2 {\r\n    degrees = degrees * Constant.TAU;\r\n    let cosT = Math.cos(degrees);\r\n    let sinT = Math.sin(degrees);\r\n    return new Vector2(\r\n      (cosT * (this.x - pivot.x)) - (sinT * (this.y - pivot.y)) + pivot.x,\r\n      (sinT * (this.x - pivot.x)) + (cosT * (this.y - pivot.y)) + pivot.y\r\n    );\r\n  }\r\n\r\n  rotateInPlace(pivot: Vector2, degrees: number): Vector2 {\r\n    degrees = degrees * Constant.TAU;\r\n    let cosT = Math.cos(degrees);\r\n    let sinT = Math.sin(degrees);\r\n    this.tmpX = (cosT * (this.x - pivot.x)) - (sinT * (this.y - pivot.y)) + pivot.x;\r\n    this.tmpY = (sinT * (this.x - pivot.x)) + (cosT * (this.y - pivot.y)) + pivot.y;\r\n    this.x = this.tmpX;\r\n    this.y = this.tmpY;\r\n    return this;\r\n  }\r\n\r\n  max() {\r\n    return Math.max(this.x, this.y);\r\n  }\r\n\r\n  transform(matrix: Matrix) {\r\n    let result = Matrix.Multiply([[this.x, this.y, 1]], matrix.value);\r\n    return new Vector2(result[0][0], result[0][1]);\r\n  }\r\n\r\n  transformInPlace(matrix: Matrix) {\r\n    let result = Matrix.Multiply([[this.x, this.y, 1]], matrix.value);\r\n    this.x = result[0][0];\r\n    this.y = result[0][1];\r\n  }\r\n\r\n  static Midpoint(vector1: Vector2, vector2: Vector2): Vector2 {\r\n    return new Vector2((vector1.x + vector2.x) / 2, (vector1.y + vector2.y) / 2);\r\n  }\r\n\r\n  static Distance(vector1: Vector2, vector2: Vector2): number {\r\n    return Math.sqrt(Math.pow(vector2.x - vector1.x, 2) + Math.pow(vector2.y - vector1.y, 2));\r\n  }\r\n\r\n  static Zero(): Vector2 {\r\n    return new Vector2(0, 0);\r\n  }\r\n\r\n  static One(): Vector2 {\r\n    return new Vector2(1, 1);\r\n  }\r\n\r\n\r\n  static Bounds(vectors: Vector2[]): Vector2[] {\r\n    let minVec = new Vector2(Number.MAX_VALUE, Number.MAX_VALUE);\r\n    let maxVec = new Vector2(Number.MIN_VALUE, Number.MIN_VALUE);\r\n\r\n    vectors.forEach((vector) => {\r\n      if (vector.x < minVec.x) minVec.x = vector.x;\r\n      if (vector.y < minVec.y) minVec.y = vector.y;\r\n      if (vector.x > maxVec.x) maxVec.x = vector.x;\r\n      if (vector.y > maxVec.y) maxVec.y = vector.y;\r\n    });\r\n    return [minVec, maxVec];\r\n  }\r\n\r\n  static Average(vectors: Vector2[]): Vector2 {\r\n    let sumX = 0;\r\n    let sumY = 0;\r\n    vectors.forEach((vector) => {\r\n      sumX += vector.x;\r\n      sumY += vector.y;\r\n    });\r\n    return new Vector2(sumX / vectors.length, sumY / vectors.length);\r\n  }\r\n\r\n  static Random(minXOrCanvas: number | Canvas, maxX?: number, minY?: number, maxY?: number): Vector2 {\r\n    if (minXOrCanvas instanceof Canvas) {\r\n      return new Vector2(\r\n        Math.random() * minXOrCanvas.width,\r\n        Math.random() * minXOrCanvas.height\r\n      );\r\n    } else {\r\n      return new Vector2(\r\n        Math.random() * (maxX - minXOrCanvas) + minXOrCanvas,\r\n        Math.random() * (maxY - minY) + minY\r\n      );\r\n    }\r\n  }\r\n\r\n  static Lerp(start: Vector2, end: Vector2, amount: number): Vector2 {\r\n    return new Vector2(\r\n      start.x + ((end.x - start.x) * amount),\r\n      start.y + ((end.y - start.y) * amount)\r\n    );\r\n  }\r\n\r\n  clone(): Vector2 {\r\n    return new Vector2(this.x, this.y);\r\n  }\r\n}\r\n","import { Vector2 } from \"../Math/math\";\r\nimport { LinearGradient, RadialGradient } from \"./view\";\r\nimport { Node } from '../node';\r\n\r\ninterface IEllipseProperties {\r\n  outline?: boolean\r\n  fill?: boolean,\r\n  outlineColor?: string | LinearGradient | RadialGradient,\r\n  fillColor?: string | LinearGradient | RadialGradient,\r\n  outlineWidth?: number,\r\n  outlineDashSegments?: number[],\r\n  shadowColor?: string,\r\n  shadowOffset?: Vector2,\r\n  staticShadow?: boolean,\r\n  shadowBlur?: number\r\n}\r\n\r\nexport class Ellipse extends Node {\r\n\r\n  constructor(id: string, position: Vector2, public minor: number, public major: number, public props?: IEllipseProperties) {\r\n\r\n    super(id, position, [\r\n      position.subtract(0, minor),\r\n      position.add(major, 0),\r\n      position.add(0, minor),\r\n      position.subtract(major, 0)\r\n    ]);\r\n\r\n    (!props) && (this.props = {});\r\n    if (this.props.outlineColor && typeof (this.props.outlineColor) != 'string') {\r\n      this.props.outlineColor.node = this;\r\n    }\r\n    if (this.props.fillColor && typeof (this.props.fillColor) != 'string') {\r\n      this.props.fillColor.node = this;\r\n    }\r\n  }\r\n\r\n  _render(): void {\r\n    if (this.props) {\r\n      (this.props.outlineColor) && (this.context.strokeStyle = (typeof (this.props.outlineColor) == 'string') ? this.props.outlineColor : this.props.outlineColor.create(this.context));\r\n      (this.props.fillColor) && (this.context.fillStyle = (typeof (this.props.fillColor) == 'string') ? this.props.fillColor : this.props.fillColor.create(this.context));\r\n      (this.props.outlineWidth) && (this.context.lineWidth = this.props.outlineWidth);\r\n      (this.props.outlineDashSegments) && this.context.setLineDash(this.props.outlineDashSegments);\r\n      (this.props.shadowColor) && (this.context.shadowColor = this.props.shadowColor);\r\n      (this.props.shadowBlur) && (this.context.shadowBlur = this.props.shadowBlur);\r\n      if (this.props.shadowOffset) {\r\n        if (!this.props.staticShadow) {\r\n          let shadowOffset = this.props.shadowOffset.transform(this.transform.worldTransform).subtract(this.absolutePosition);\r\n          this.context.shadowOffsetX = shadowOffset.x;\r\n          this.context.shadowOffsetY = shadowOffset.y;\r\n        } else {\r\n          this.context.shadowOffsetX = this.props.shadowOffset.x;\r\n          this.context.shadowOffsetY = this.props.shadowOffset.y;\r\n        }\r\n      }\r\n    }\r\n\r\n    let position = this.absolutePosition;\r\n    this.context.beginPath();\r\n    if (this.minor == this.major) {\r\n      this.context.arc(position.x, position.y, this.minor, 0, 2 * Math.PI);\r\n    } else {\r\n      this.context.ellipse(\r\n        position.x, position.y,\r\n        this.major,\r\n        this.minor,\r\n        Math.atan2(this.transform.controlPoints[1].y - position.y, this.transform.controlPoints[1].x - position.x),\r\n        0,\r\n        2 * Math.PI\r\n      );\r\n    }\r\n    if (this.props.fill) {\r\n      this.context.fill();\r\n    }\r\n    if (this.props.outline || !this.props.fill) {\r\n      this.context.stroke();\r\n    }\r\n  }\r\n\r\n  _offRender(): void {\r\n    (this.props.outlineWidth) && (this.offContext.lineWidth = this.props.outlineWidth);\r\n    this.offContext.strokeStyle = this.hitColor;\r\n    this.offContext.fillStyle = this.hitColor;\r\n\r\n    let position = this.absolutePosition;\r\n    this.offContext.beginPath();\r\n    if (this.minor == this.major) {\r\n      this.offContext.arc(position.x, position.y, this.minor, 0, 2 * Math.PI);\r\n    } else {\r\n      this.offContext.ellipse(\r\n        position.x, position.y,\r\n        this.major,\r\n        this.minor,\r\n        Math.atan2(this.transform.controlPoints[1].y - position.y, this.transform.controlPoints[1].x - position.x),\r\n        0,\r\n        2 * Math.PI\r\n      );\r\n    }\r\n    if (this.props.fill) {\r\n      this.offContext.fill();\r\n    }\r\n    if (this.props.outline || !this.props.fill) {\r\n      this.offContext.stroke();\r\n    }\r\n  }\r\n\r\n  getDimension(): Vector2 {\r\n    return new Vector2(\r\n      Vector2.Distance(this.transform.controlPoints[1], this.transform.controlPoints[3]),\r\n      Vector2.Distance(this.transform.controlPoints[0], this.transform.controlPoints[2])\r\n    );\r\n  }\r\n}\r\n","import { Vector2 } from \"../Math/math\";\r\nimport { Node } from '../node';\r\n\r\nexport class Empty extends Node {\r\n\r\n  constructor(id: string, position: Vector2) {\r\n    super(id, position, []);\r\n  }\r\n\r\n  _render(): void { /**/ }\r\n  _offRender(): void { /**/ }\r\n\r\n  getDimension(): Vector2 {\r\n    return Vector2.Zero();\r\n  }\r\n}\r\n","import { Vector2 } from \"../Math/math\";\r\nimport { Node } from '../node';\r\n\r\ninterface IImageProperties {\r\n  shadowColor?: string,\r\n  shadowOffset?: Vector2,\r\n  staticShadow?: boolean,\r\n  shadowBlur?: number\r\n}\r\n\r\nexport class Image extends Node {\r\n\r\n  _source: HTMLImageElement;\r\n\r\n  constructor(id: string, position: Vector2, source: string | HTMLImageElement, public width: number, public height: number, public props?: IImageProperties) {\r\n    super(id, position, []);\r\n\r\n    (!props) && (this.props = {});\r\n    if (typeof (source) == 'string') {\r\n      this._source = new window.Image();\r\n      this._source.src = source;\r\n    } else {\r\n      this._source = source;\r\n    }\r\n    this._source.crossOrigin = \"Anonymous\";\r\n  }\r\n\r\n  _render(): void {\r\n    if (this.props) {\r\n      (this.props.shadowColor) && (this.context.shadowColor = this.props.shadowColor);\r\n      (this.props.shadowBlur) && (this.context.shadowBlur = this.props.shadowBlur);\r\n      if (this.props.shadowOffset) {\r\n        if (!this.props.staticShadow) {\r\n          let shadowOffset = this.props.shadowOffset.transform(this.transform.worldTransform).subtract(this.absolutePosition);\r\n          this.context.shadowOffsetX = shadowOffset.x;\r\n          this.context.shadowOffsetY = shadowOffset.y;\r\n        } else {\r\n          this.context.shadowOffsetX = this.props.shadowOffset.x;\r\n          this.context.shadowOffsetY = this.props.shadowOffset.y;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Rotate image using worldTransform's rotation component\r\n    this.context.translate(this.absolutePosition.x, this.absolutePosition.y);\r\n    this.context.rotate(this.transform.worldTransform.getRotation() * (Math.PI / 180));\r\n    this.context.translate(-this.absolutePosition.x, -this.absolutePosition.y);\r\n\r\n    let topLeft = this.absolutePosition.subtract((this.width * this.transform.scale.x) / 2, (this.height * this.transform.scale.y) / 2);\r\n    this.context.drawImage(this._source, topLeft.x, topLeft.y, this.width * this.transform.scale.x, this.height * this.transform.scale.y);\r\n  }\r\n\r\n  _offRender(): void {\r\n    this.offContext.fillStyle = this.hitColor;\r\n\r\n    // Rotate bounding-rectangle using worldTransform's rotation component\r\n    this.offContext.translate(this.absolutePosition.x, this.absolutePosition.y);\r\n    this.offContext.rotate(this.transform.worldTransform.getRotation() * (Math.PI / 180));\r\n    this.offContext.translate(-this.absolutePosition.x, -this.absolutePosition.y);\r\n\r\n    let topLeft = this.absolutePosition.subtract((this.width * this.transform.scale.x) / 2, (this.height * this.transform.scale.y) / 2);\r\n    this.offContext.fillRect(topLeft.x, topLeft.y, this.width * this.transform.scale.x, this.height * this.transform.scale.y);\r\n  }\r\n\r\n  getDimension(): Vector2 {\r\n    return new Vector2(\r\n      this.width,\r\n      this.height\r\n    );\r\n  }\r\n}\r\n","import { Vector2 } from \"../Math/math\";\r\nimport { LinearGradient, RadialGradient } from \"./view\";\r\nimport { Node } from '../node';\r\n\r\ninterface ILineProperties {\r\n  color?: string | LinearGradient | RadialGradient,\r\n  lineWidth?: number,\r\n  lineCap?: CanvasLineCap,\r\n  lineDashSegments?: number[],\r\n  shadowColor?: string,\r\n  shadowOffset?: Vector2,\r\n  staticShadow?: boolean,\r\n  shadowBlur?: number\r\n}\r\n\r\nexport class Line extends Node {\r\n\r\n  get from(): Vector2 {\r\n    if (this._from instanceof Node)\r\n      return this._from.absolutePosition;\r\n    else\r\n      return this.transform.controlPoints[0];\r\n  }\r\n  get to(): Vector2 {\r\n    if (this._to instanceof Node)\r\n      return this._to.absolutePosition;\r\n    else\r\n      return this.transform.controlPoints[1];\r\n  }\r\n\r\n  constructor(id: string, public _from: Vector2 | Node, public _to: Vector2 | Node, pivot?: number, public props?: ILineProperties) {\r\n    super(\r\n      id,\r\n      (_from instanceof Vector2 && _to instanceof Vector2) ?\r\n        ((pivot) ? _from.add((_to.x - _from.x) * pivot, (_to.y - _from.y) * pivot) : _from.clone()) :\r\n        (Vector2.Zero()),\r\n      (_from instanceof Vector2 && _to instanceof Vector2) ?\r\n        [_from, _to] :\r\n        []\r\n    );\r\n\r\n    (!props) && (this.props = {});\r\n    if (this.props.color && typeof (this.props.color) != 'string') {\r\n      this.props.color.node = this;\r\n    }\r\n  }\r\n\r\n  _render(): void {\r\n    if (this.props) {\r\n      (this.props.color) && (this.context.strokeStyle = (typeof (this.props.color) == 'string') ? this.props.color : this.props.color.create(this.context));\r\n      (this.props.lineWidth) && (this.context.lineWidth = this.props.lineWidth);\r\n      (this.props.lineCap) && (this.context.lineCap = this.props.lineCap);\r\n      (this.props.lineDashSegments) && this.context.setLineDash(this.props.lineDashSegments);\r\n      (this.props.shadowColor) && (this.context.shadowColor = this.props.shadowColor);\r\n      (this.props.shadowBlur) && (this.context.shadowBlur = this.props.shadowBlur);\r\n      if (this.props.shadowOffset) {\r\n        if (!this.props.staticShadow) {\r\n          let shadowOffset = this.props.shadowOffset.transform(this.transform.worldTransform).subtract(this.absolutePosition);\r\n          this.context.shadowOffsetX = shadowOffset.x;\r\n          this.context.shadowOffsetY = shadowOffset.y;\r\n        } else {\r\n          this.context.shadowOffsetX = this.props.shadowOffset.x;\r\n          this.context.shadowOffsetY = this.props.shadowOffset.y;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.context.beginPath();\r\n    this.context.moveTo(this.from.x, this.from.y);\r\n    this.context.lineTo(this.to.x, this.to.y);\r\n    this.context.stroke();\r\n  }\r\n\r\n  _offRender(): void {\r\n    (this.props.lineWidth) && (this.offContext.lineWidth = this.props.lineWidth);\r\n    this.offContext.strokeStyle = this.hitColor;\r\n\r\n    this.offContext.beginPath();\r\n    this.offContext.moveTo(this.from.x, this.from.y);\r\n    this.offContext.lineTo(this.to.x, this.to.y);\r\n    this.offContext.stroke();\r\n  }\r\n\r\n  getDimension(): Vector2 {\r\n    return new Vector2(Vector2.Distance(this.transform.controlPoints[0], this.transform.controlPoints[1]), 0);\r\n  }\r\n}\r\n","import { Vector2 } from \"../Math/math\";\r\nimport { LinearGradient, RadialGradient } from \"./view\";\r\nimport { Node } from '../node';\r\nimport { Handle } from \"../enums\";\r\n\r\ninterface IPolygonProperties {\r\n  outline?: boolean\r\n  fill?: boolean,\r\n  outlineColor?: string | LinearGradient | RadialGradient,\r\n  fillColor?: string | LinearGradient | RadialGradient,\r\n  outlineWidth?: number,\r\n  outlineDashSegments?: number[],\r\n  shadowColor?: string,\r\n  shadowOffset?: Vector2,\r\n  staticShadow?: boolean,\r\n  shadowBlur?: number\r\n}\r\n\r\nexport class Polygon extends Node {\r\n\r\n  constructor(id: string, vertices: Vector2[], center: Vector2 | Handle, public props?: IPolygonProperties) {\r\n\r\n    super(\r\n      id,\r\n      (center instanceof Vector2) ? center : Vector2.Average(vertices),\r\n      vertices\r\n    );\r\n\r\n    (!props) && (this.props = {});\r\n    if (this.props.outlineColor && typeof (this.props.outlineColor) != 'string') {\r\n      this.props.outlineColor.node = this;\r\n    }\r\n    if (this.props.fillColor && typeof (this.props.fillColor) != 'string') {\r\n      this.props.fillColor.node = this;\r\n    }\r\n  }\r\n\r\n  _render(): void {\r\n    if (this.props) {\r\n      (this.props.outlineColor) && (this.context.strokeStyle = (typeof (this.props.outlineColor) == 'string') ? this.props.outlineColor : this.props.outlineColor.create(this.context));\r\n      (this.props.fillColor) && (this.context.fillStyle = (typeof (this.props.fillColor) == 'string') ? this.props.fillColor : this.props.fillColor.create(this.context));\r\n      (this.props.outlineWidth) && (this.context.lineWidth = this.props.outlineWidth);\r\n      (this.props.outlineDashSegments) && this.context.setLineDash(this.props.outlineDashSegments);\r\n      (this.props.shadowColor) && (this.context.shadowColor = this.props.shadowColor);\r\n      (this.props.shadowBlur) && (this.context.shadowBlur = this.props.shadowBlur);\r\n      if (this.props.shadowOffset) {\r\n        if (!this.props.staticShadow) {\r\n          let shadowOffset = this.props.shadowOffset.transform(this.transform.worldTransform).subtract(this.absolutePosition);\r\n          this.context.shadowOffsetX = shadowOffset.x;\r\n          this.context.shadowOffsetY = shadowOffset.y;\r\n        } else {\r\n          this.context.shadowOffsetX = this.props.shadowOffset.x;\r\n          this.context.shadowOffsetY = this.props.shadowOffset.y;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.context.beginPath();\r\n    this.context.moveTo(this.transform.controlPoints[0].x, this.transform.controlPoints[0].y);\r\n    for (let index = 1; index < this.transform.controlPoints.length; index++) {\r\n      this.context.lineTo(this.transform.controlPoints[index].x, this.transform.controlPoints[index].y);\r\n    }\r\n    this.context.closePath();\r\n\r\n    if (this.props.fill) {\r\n      this.context.fill();\r\n    }\r\n    if (this.props.outline || !this.props.fill) {\r\n      this.context.stroke();\r\n    }\r\n  }\r\n\r\n  _offRender(): void {\r\n    (this.props.outlineWidth) && (this.offContext.lineWidth = this.props.outlineWidth);\r\n    this.offContext.strokeStyle = this.hitColor;\r\n    this.offContext.fillStyle = this.hitColor;\r\n\r\n    this.offContext.beginPath();\r\n    this.offContext.moveTo(this.transform.controlPoints[0].x, this.transform.controlPoints[0].y);\r\n    for (let index = 1; index < this.transform.controlPoints.length; index++) {\r\n      this.offContext.lineTo(this.transform.controlPoints[index].x, this.transform.controlPoints[index].y);\r\n    }\r\n    this.offContext.closePath();\r\n\r\n    if (this.props.fill) {\r\n      this.offContext.fill();\r\n    }\r\n    if (this.props.outline || !this.props.fill) {\r\n      this.offContext.stroke();\r\n    }\r\n  }\r\n\r\n  getDimension(): Vector2 {\r\n    let bounds = Vector2.Bounds(this.transform.controlPoints);\r\n\r\n    return new Vector2(\r\n      Math.abs(bounds[0].x - bounds[1].x),\r\n      Math.abs(bounds[0].y - bounds[1].y)\r\n    );\r\n  }\r\n}\r\n","import { Vector2 } from \"../Math/math\";\r\nimport { LinearGradient, RadialGradient } from \"./view\";\r\nimport { Node } from '../node';\r\n\r\ninterface IRectangleProperties {\r\n  outline?: boolean,\r\n  fill?: boolean,\r\n  outlineColor?: string | LinearGradient | RadialGradient,\r\n  fillColor?: string | LinearGradient | RadialGradient,\r\n  outlineWidth?: number,\r\n  outlineDashSegments?: number[],\r\n  shadowColor?: string,\r\n  shadowOffset?: Vector2,\r\n  staticShadow?: boolean,\r\n  shadowBlur?: number\r\n}\r\n\r\nexport class Rectangle extends Node {\r\n\r\n  constructor(id: string, position: Vector2, width: number, height: number, public props?: IRectangleProperties) {\r\n\r\n    super(id, position, [\r\n      position.add(-width / 2, -height / 2),\r\n      position.add(width / 2, -height / 2),\r\n      position.add(width / 2, height / 2),\r\n      position.add(-width / 2, height / 2)\r\n    ]);\r\n\r\n    (!props) && (this.props = {});\r\n    if (this.props.outlineColor && typeof (this.props.outlineColor) != 'string') {\r\n      this.props.outlineColor.node = this;\r\n    }\r\n    if (this.props.fillColor && typeof (this.props.fillColor) != 'string') {\r\n      this.props.fillColor.node = this;\r\n    }\r\n  }\r\n\r\n  _render(): void {\r\n    if (this.props) {\r\n      (this.props.outlineColor) && (this.context.strokeStyle = (typeof (this.props.outlineColor) == 'string') ? this.props.outlineColor : this.props.outlineColor.create(this.context));\r\n      (this.props.fillColor) && (this.context.fillStyle = (typeof (this.props.fillColor) == 'string') ? this.props.fillColor : this.props.fillColor.create(this.context));\r\n      (this.props.outlineWidth) && (this.context.lineWidth = this.props.outlineWidth);\r\n      (this.props.outlineDashSegments) && this.context.setLineDash(this.props.outlineDashSegments);\r\n      (this.props.shadowColor) && (this.context.shadowColor = this.props.shadowColor);\r\n      (this.props.shadowBlur) && (this.context.shadowBlur = this.props.shadowBlur);\r\n      if (this.props.shadowOffset) {\r\n        if (!this.props.staticShadow) {\r\n          let shadowOffset = this.props.shadowOffset.transform(this.transform.worldTransform).subtract(this.absolutePosition);\r\n          this.context.shadowOffsetX = shadowOffset.x;\r\n          this.context.shadowOffsetY = shadowOffset.y;\r\n        } else {\r\n          this.context.shadowOffsetX = this.props.shadowOffset.x;\r\n          this.context.shadowOffsetY = this.props.shadowOffset.y;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.context.beginPath();\r\n    this.context.moveTo(this.transform.controlPoints[0].x, this.transform.controlPoints[0].y);\r\n    this.context.lineTo(this.transform.controlPoints[1].x, this.transform.controlPoints[1].y);\r\n    this.context.lineTo(this.transform.controlPoints[2].x, this.transform.controlPoints[2].y);\r\n    this.context.lineTo(this.transform.controlPoints[3].x, this.transform.controlPoints[3].y);\r\n    this.context.lineTo(this.transform.controlPoints[0].x, this.transform.controlPoints[0].y);\r\n    if (this.props.fill) {\r\n      this.context.fill();\r\n    }\r\n    if (this.props.outline || !this.props.fill) {\r\n      this.context.stroke();\r\n    }\r\n  }\r\n\r\n  _offRender(): void {\r\n    (this.props.outlineWidth) && (this.offContext.lineWidth = this.props.outlineWidth);\r\n    this.offContext.strokeStyle = this.hitColor;\r\n    this.offContext.fillStyle = this.hitColor;\r\n\r\n    this.offContext.beginPath();\r\n    this.offContext.moveTo(this.transform.controlPoints[0].x, this.transform.controlPoints[0].y);\r\n    this.offContext.lineTo(this.transform.controlPoints[1].x, this.transform.controlPoints[1].y);\r\n    this.offContext.lineTo(this.transform.controlPoints[2].x, this.transform.controlPoints[2].y);\r\n    this.offContext.lineTo(this.transform.controlPoints[3].x, this.transform.controlPoints[3].y);\r\n    this.offContext.lineTo(this.transform.controlPoints[0].x, this.transform.controlPoints[0].y);\r\n    if (this.props.fill) {\r\n      this.offContext.fill();\r\n    }\r\n    if (this.props.outline || !this.props.fill) {\r\n      this.offContext.stroke();\r\n    }\r\n  }\r\n\r\n  getDimension(): Vector2 {\r\n    return new Vector2(\r\n      Vector2.Distance(this.transform.controlPoints[0], this.transform.controlPoints[1]),\r\n      Vector2.Distance(this.transform.controlPoints[1], this.transform.controlPoints[2])\r\n    );\r\n  }\r\n}\r\n","import { Vector2 } from \"../Math/math\";\r\nimport { LinearGradient, RadialGradient } from \"./view\";\r\nimport { Node } from '../node';\r\n\r\ninterface ITextProperties {\r\n  font?: string,\r\n  outline?: boolean,\r\n  fill?: boolean,\r\n  outlineColor?: string | LinearGradient | RadialGradient,\r\n  fillColor?: string | LinearGradient | RadialGradient,\r\n  outlineWidth?: number,\r\n  shadowColor?: string,\r\n  shadowOffset?: Vector2,\r\n  staticShadow?: boolean,\r\n  shadowBlur?: number\r\n}\r\n\r\nexport class Text extends Node {\r\n\r\n  _text: string;\r\n  _originalWidth: number;\r\n  _originalHeight: number;\r\n\r\n  get text(): string {\r\n    return this._text;\r\n  }\r\n  set text(text: string) {\r\n    this._text = text;\r\n  }\r\n\r\n  constructor(id: string, position: Vector2, text: string, public props?: ITextProperties) {\r\n    super(id, position, []);\r\n\r\n    (!props) && (this.props = {});\r\n    this.text = text;\r\n    if (this.props.outlineColor && typeof (this.props.outlineColor) != 'string') {\r\n      this.props.outlineColor.node = this;\r\n    }\r\n    if (this.props.fillColor && typeof (this.props.fillColor) != 'string') {\r\n      this.props.fillColor.node = this;\r\n    }\r\n\r\n    let textMetricContext = document.createElement('canvas').getContext('2d');\r\n    (this.props.font) && (textMetricContext.font = this.props.font);\r\n    this._originalWidth = textMetricContext.measureText(text).width;\r\n    this._originalHeight = textMetricContext.measureText('M').width;\r\n  }\r\n\r\n  _render(): void {\r\n    if (this.props) {\r\n      (this.props.outlineColor) && (this.context.strokeStyle = (typeof (this.props.outlineColor) == 'string') ? this.props.outlineColor : this.props.outlineColor.create(this.context));\r\n      (this.props.fillColor) && (this.context.fillStyle = (typeof (this.props.fillColor) == 'string') ? this.props.fillColor : this.props.fillColor.create(this.context));\r\n      (this.props.outlineWidth) && (this.context.lineWidth = this.props.outlineWidth);\r\n      (this.props.shadowColor) && (this.context.shadowColor = this.props.shadowColor);\r\n      (this.props.shadowBlur) && (this.context.shadowBlur = this.props.shadowBlur);\r\n      if (this.props.shadowOffset) {\r\n        if (!this.props.staticShadow) {\r\n          let shadowOffset = this.props.shadowOffset.transform(this.transform.worldTransform).subtract(this.absolutePosition);\r\n          this.context.shadowOffsetX = shadowOffset.x;\r\n          this.context.shadowOffsetY = shadowOffset.y;\r\n        } else {\r\n          this.context.shadowOffsetX = this.props.shadowOffset.x;\r\n          this.context.shadowOffsetY = this.props.shadowOffset.y;\r\n        }\r\n      }\r\n      (this.props.font) && (this.context.font = this.props.font);\r\n    }\r\n\r\n    // Rotate image using worldTransform's rotation component\r\n    this.context.translate(this.absolutePosition.x, this.absolutePosition.y);\r\n    this.context.scale(this.scale.x, this.scale.y);\r\n    this.context.rotate(this.transform.worldTransform.getRotation() * (Math.PI / 180));\r\n    this.context.translate(-this.absolutePosition.x, -this.absolutePosition.y);\r\n\r\n    (this.props.outline) && this.context.strokeText(this.text, this.absolutePosition.x - (this._originalWidth / 2), this.absolutePosition.y + (this._originalHeight / 2));\r\n    (this.props.fill || !this.props.outline) && this.context.fillText(this.text, this.absolutePosition.x - (this._originalWidth / 2), this.absolutePosition.y + (this._originalHeight / 2));\r\n  }\r\n\r\n  _offRender(): void {\r\n    this.offContext.fillStyle = this.hitColor;\r\n\r\n    // Rotate image using worldTransform's rotation component\r\n    this.offContext.translate(this.absolutePosition.x, this.absolutePosition.y);\r\n    this.offContext.scale(this.scale.x, this.scale.y);\r\n    this.offContext.rotate(this.transform.worldTransform.getRotation() * (Math.PI / 180));\r\n    this.offContext.translate(-this.absolutePosition.x, -this.absolutePosition.y);\r\n\r\n    this.offContext.fillRect(this.absolutePosition.x - (this._originalWidth / 2), this.absolutePosition.y - (this._originalHeight / 2), (this._originalWidth), (this._originalHeight));\r\n  }\r\n\r\n  getDimension(): Vector2 {\r\n    return new Vector2(Vector2.Distance(this.transform.controlPoints[0], this.transform.controlPoints[1]), 0);\r\n  }\r\n}\r\n","import { Constant, Vector2 } from \"../Math/math\";\r\nimport { Handle } from \"../enums\";\r\nimport { Node } from '../node';\r\n\r\nexport * from './ellipse';\r\nexport * from './empty';\r\nexport * from './image';\r\nexport * from './line';\r\nexport * from './polygon';\r\nexport * from './rectangle';\r\nexport * from './text';\r\n\r\nexport class LinearGradient {\r\n\r\n  node: Node;\r\n\r\n  constructor(public offset: Vector2, public degrees: number, public length: number | Handle, public colors: string[], public weights: number[]) { }\r\n\r\n  create(context: CanvasRenderingContext2D): CanvasGradient {\r\n    let gradient: CanvasGradient, from, to, length, delta = new Vector2(0, 0);\r\n\r\n    length = (this.length == Handle.AUTO) ? this.node.getDimension().max() : this.length;\r\n    delta.x = (length / 2) * Math.cos(this.degrees * Constant.TAU);\r\n    delta.y = (length / 2) * Math.sin(this.degrees * Constant.TAU);\r\n\r\n    from = this.offset.subtract(delta).transform(this.node.transform.worldTransform);\r\n    to = this.offset.add(delta).transform(this.node.transform.worldTransform);\r\n\r\n    gradient = context.createLinearGradient(from.x, from.y, to.x, to.y);\r\n    this.colors.forEach((color, index) => {\r\n      gradient.addColorStop(this.weights[index], color);\r\n    });\r\n    return gradient;\r\n  }\r\n}\r\n\r\nexport class RadialGradient {\r\n\r\n  node: Node;\r\n\r\n  constructor(public fromOffset: Vector2, public fromRadius: number | Handle, public toOffset: Vector2, public toRadius: number | Handle, public colors: string[], public weights: number[]) { }\r\n\r\n  create(context: CanvasRenderingContext2D): CanvasGradient {\r\n    let gradient: CanvasGradient;\r\n    let fromCenter = this.fromOffset.transform(this.node.transform.worldTransform);\r\n    let toCenter = this.toOffset.transform(this.node.transform.worldTransform);\r\n    let fromRadius, toRadius;\r\n    if (this.fromRadius == Handle.AUTO || this.toRadius == Handle.AUTO) {\r\n      fromRadius = 1;\r\n      toRadius = this.node.getDimension().max() / 2;\r\n    } else {\r\n      fromRadius = this.fromRadius;\r\n      toRadius = this.toRadius;\r\n    }\r\n\r\n    gradient = context.createRadialGradient(fromCenter.x, fromCenter.y, fromRadius, toCenter.x, toCenter.y, toRadius);\r\n    this.colors.forEach((color, index) => {\r\n      gradient.addColorStop(this.weights[index], color);\r\n    });\r\n    return gradient;\r\n  }\r\n}\r\n","import { Drawing } from \"./drawing\";\r\n\r\n/**\r\n * The Canvas object holds an HTMLCanvasElement reference and its 2d context\r\n */\r\nexport class Canvas {\r\n  canvasElement: HTMLCanvasElement;\r\n  context: CanvasRenderingContext2D;\r\n  offCanvasElement: OffscreenCanvas;\r\n  offContext: OffscreenCanvasRenderingContext2D;\r\n\r\n  width: number;\r\n  height: number;\r\n  private drawingHandle: number = -1;\r\n\r\n  /**\r\n   * If no parameters are passed then a new canvas element will be created and appended to `<body>`\r\n   * \r\n   * @param element Reference to an html `<canvas>` or `<div>` element, if a `<div>` element is passed, then a canvas will be created and appended\r\n   * @param width Passing a width will overwrite previously defined canvas width\r\n   * @param height Passing a height will overwrite previously defined canvas height\r\n   */\r\n  constructor(element?: HTMLCanvasElement | HTMLDivElement, width?: number, height?: number) {\r\n    if (!element) {\r\n      this.canvasElement = document.createElement('canvas');\r\n      this.canvasElement.width = document.body.clientWidth;\r\n      this.canvasElement.height = document.body.clientHeight;\r\n      document.body.appendChild(this.canvasElement);\r\n    } else {\r\n      if (element instanceof HTMLDivElement) {\r\n        this.canvasElement = document.createElement('canvas');\r\n        if (width && height) {\r\n          this.canvasElement.width = width;\r\n          this.canvasElement.height = height;\r\n        } else {\r\n          this.canvasElement.width = element.clientWidth;\r\n          this.canvasElement.height = element.clientHeight;\r\n        }\r\n        element.appendChild(this.canvasElement);\r\n      } else {\r\n        this.canvasElement = element;\r\n        if (width && height) {\r\n          this.canvasElement.width = width;\r\n          this.canvasElement.height = height;\r\n        }\r\n      }\r\n    }\r\n    this.width = this.canvasElement.width;\r\n    this.height = this.canvasElement.height;\r\n    this.context = this.canvasElement.getContext('2d');\r\n\r\n    this.offCanvasElement = new OffscreenCanvas(this.width, this.height);\r\n    this.offContext = this.offCanvasElement.getContext('2d');\r\n  }\r\n\r\n  /**\r\n   * Calls render function of `Drawing`\r\n   * \r\n   * @param drawing A `Drawing` object, which will be rendered by this canvas\r\n   */\r\n  draw(drawing: Drawing) {\r\n    if (this.drawingHandle != -1) {\r\n      window.cancelAnimationFrame(this.drawingHandle);\r\n    }\r\n    window.requestAnimationFrame(drawing.render.bind(drawing));\r\n  }\r\n}\r\n","export class Color {\r\n  static Random(): string {\r\n    return ('#' + Math.floor(Math.random() * 16777215).toString(16));\r\n  }\r\n\r\n  static rgbToHex(rgb: number[] | Uint8ClampedArray): string {\r\n    return \"#\" + Color._componentToHex(rgb[0]) + Color._componentToHex(rgb[1]) + Color._componentToHex(rgb[2]);\r\n  }\r\n\r\n  static _componentToHex(c: number) {\r\n    let hex = c.toString(16);\r\n    return hex.length == 1 ? '0' + hex : hex;\r\n  }\r\n}\r\n","import { Drawing, IDebugCall } from \"./drawing\";\r\nimport { Vector2 } from \"./Math/math\";\r\n\r\n/**\r\n * Includes static methods for debugging\r\n */\r\nexport class Debug {\r\n\r\n  /**\r\n   * Will render a filled circle denoting a single point on canvas\r\n   * \r\n   * @param key A unique name for this debug\r\n   * @param drawing Drawing, on which this debug will render\r\n   * @param point The point to render\r\n   * @param props Styling properties for debug\r\n   * @param frames Specifies for how many frames this debug will persist (e.g passing 100 will allow this debug to be rendered for 100 consecutive frames without clearing it from canvas)\r\n   */\r\n  static debugPoint(key: string, drawing: Drawing, point: Vector2, props: { color: string, radius?: number }, frames?: number) {\r\n    Debug.limitDebugCalls(drawing, key, frames);\r\n\r\n    drawing.debugCalls[key].push({\r\n      debugFunction: Debug._debugPoint,\r\n      arguments: [drawing.canvas.context, point.clone(), props]\r\n    });\r\n  }\r\n\r\n  private static _debugPoint(context: CanvasRenderingContext2D, center: Vector2, props: { color: string, radius?: number }) {\r\n    context.fillStyle = props.color;\r\n    context.beginPath();\r\n    context.arc(center.x, center.y, (props.radius) ? props.radius : 2, 0, 2 * Math.PI);\r\n    context.fill();\r\n  }\r\n\r\n  /**\r\n   * Will render a line with green and red dots on start and end co-ordinates of line\r\n   * \r\n   * @param key A unique name for this debug\r\n   * @param drawing Drawing, on which this debug will render\r\n   * @param from Start Vector for this line\r\n   * @param to End Vector point for this line\r\n   * @param props Styling properties for debug\r\n   * @param frames Specifies for how many frames this debug will persist (e.g passing 100 will allow this debug to be rendered for 100 consecutive frames without clearing it from canvas)\r\n   */\r\n  static debugLine(key: string, drawing: Drawing, from: Vector2, to: Vector2, props: { color: string, width?: number }, frames?: number) {\r\n    Debug.limitDebugCalls(drawing, key, frames);\r\n\r\n    drawing.debugCalls[key].push({\r\n      debugFunction: Debug._debugLine,\r\n      arguments: [drawing.canvas.context, from.clone(), to.clone(), props]\r\n    });\r\n  }\r\n\r\n  private static _debugLine(context: CanvasRenderingContext2D, from: Vector2, to: Vector2, props: { color: string, width?: number }) {\r\n    context.strokeStyle = props.color;\r\n    context.lineWidth = (props.width) ? props.width : 1;\r\n    context.beginPath();\r\n    context.moveTo(from.x, from.y);\r\n    context.lineTo(to.x, to.y);\r\n    context.stroke();\r\n\r\n    context.fillStyle = 'green'\r\n    context.beginPath();\r\n    context.arc(from.x, from.y, 2, 0, 2 * Math.PI);\r\n    context.fill();\r\n\r\n    context.fillStyle = 'red';\r\n    context.beginPath();\r\n    context.arc(to.x, to.y, 2, 0, 2 * Math.PI);\r\n    context.fill();\r\n  }\r\n\r\n  /**\r\n   * @hidden\r\n   * \r\n   * Starts debug render calls stored in debugCalls\r\n   */\r\n  static show(debugCalls: IDebugCall, context: CanvasRenderingContext2D) {\r\n    for (let debug in debugCalls) {\r\n      for (let call of debugCalls[debug]) {\r\n        context.save();\r\n        call.debugFunction(...call.arguments);\r\n        context.restore();\r\n      }\r\n    }\r\n  }\r\n\r\n  // Used for persisting the debug calls on canvas (shifts array of debug calls to limit array size to frames)\r\n  private static limitDebugCalls(drawing: Drawing, key: string, frames: number) {\r\n    if (frames && drawing.debugCalls[key] && (frames - 1) < drawing.debugCalls[key].length) {\r\n      drawing.debugCalls[key].shift();\r\n    } else {\r\n      (!drawing.debugCalls[key] || !frames) && (drawing.debugCalls[key] = []);\r\n    }\r\n  }\r\n}\r\n","import { Canvas } from \"./canvas\";\r\nimport { Debug } from \"./debug\";\r\nimport { Vector2 } from \"./Math/math\";\r\nimport { Empty } from \"./View/view\";\r\nimport { Node } from './node';\r\nimport { Color } from \"./color\";\r\n\r\nexport interface IDebugCall {\r\n  [key: string]: {\r\n    debugFunction: Function,\r\n    arguments: any[],\r\n    frames?: number\r\n  }[]\r\n}\r\n\r\n/**\r\n * Stores all views which will be rendered by canvas\r\n */\r\nexport class Drawing {\r\n\r\n  // Scene-graph root node\r\n  private renderTree: Node;\r\n  /**@hidden */\r\n  debugCalls: IDebugCall;\r\n\r\n  colorToNode: { [key: string]: Node };\r\n  mousePos: Vector2;\r\n\r\n  /**\r\n   * \r\n   * @param canvas The Canvas object\r\n   * @param globalUpdate A function that will be called per frame\r\n   */\r\n  constructor(public canvas: Canvas, public globalUpdate?: Function) {\r\n    let rootNode = new Empty('#Root', Vector2.Zero());\r\n    rootNode.context = this.canvas.context;\r\n    rootNode.drawing = this;\r\n    this.renderTree = rootNode;\r\n    this.debugCalls = {}\r\n\r\n    this.mousePos = Vector2.Zero();\r\n    this.colorToNode = {};\r\n    this._registerEvents();\r\n  }\r\n\r\n  _registerEvents(): void {\r\n    let currentHitNode: Node, prevHitNode: Node;\r\n    let currentDragNode: Node = null;\r\n    let canvasOffset: DOMRect;\r\n\r\n    this.canvas.canvasElement.onmousemove = (ev) => {\r\n      canvasOffset = this.canvas.canvasElement.getBoundingClientRect();\r\n      this.mousePos.x = ev.clientX - canvasOffset.left;\r\n      this.mousePos.y = ev.clientY - canvasOffset.top;\r\n\r\n      currentHitNode = this._getHitNode(this.mousePos);\r\n      if (currentHitNode != prevHitNode) {\r\n        (prevHitNode) && prevHitNode.call('mouseexit');\r\n        (currentHitNode) && currentHitNode.call('mouseenter');\r\n      }\r\n      prevHitNode = currentHitNode;\r\n\r\n      (currentDragNode) && currentDragNode.call('drag', [this.mousePos.clone()]);\r\n    };\r\n\r\n    this.canvas.canvasElement.onmousedown = () => {\r\n      currentDragNode = currentHitNode;\r\n\r\n      let hitNode = this._getHitNode(this.mousePos);\r\n      (hitNode) && hitNode.call('mousedown');\r\n    }\r\n\r\n    this.canvas.canvasElement.onmouseup = () => {\r\n      currentDragNode = null;\r\n\r\n      let hitNode = this._getHitNode(this.mousePos);\r\n      (hitNode) && hitNode.call('mouseup');\r\n    }\r\n\r\n    this.canvas.canvasElement.onclick = () => {\r\n      let hitNode = this._getHitNode(this.mousePos);\r\n      (hitNode) && hitNode.call('click');\r\n    };\r\n\r\n    this.canvas.canvasElement.oncontextmenu = (ev) => {\r\n      ev.preventDefault();\r\n\r\n      let hitNode = this._getHitNode(this.mousePos);\r\n      (hitNode) && hitNode.call('rightclick');\r\n    }\r\n  }\r\n\r\n  _getHitNode(position: Vector2): Node {\r\n    return (\r\n      this.colorToNode[\r\n      Color.rgbToHex(\r\n        this.canvas.offContext.getImageData(position.x, position.y, 1, 1).data\r\n      )\r\n      ]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @hidden\r\n   */\r\n  render() {\r\n    this.canvas.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    this.canvas.offContext.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n    this.renderTree.call('update');\r\n\r\n    (this.globalUpdate) && this.globalUpdate();\r\n\r\n    this.renderTree.transform.childs.forEach((child) => {\r\n      child.updateWorldTransform();\r\n    });\r\n\r\n    this.renderTree.transform.childs.forEach((child) => {\r\n      child.node.render();\r\n    });\r\n\r\n    Debug.show(this.debugCalls, this.canvas.context);\r\n    window.requestAnimationFrame(this.render.bind(this));\r\n  }\r\n\r\n  /**\r\n   * Adds a view object to this drawing\r\n   * \r\n   * @param node A View object to be rendered\r\n   */\r\n  add(node: Node | Node[]): void {\r\n    if (node instanceof Node) {\r\n      node.parent = this.renderTree;\r\n      node.setContext(this.canvas.context, this.canvas.offContext);\r\n      node.setDrawing(this);\r\n      node.setHitColor();\r\n    } else {\r\n      node.forEach((cNode) => {\r\n        cNode.parent = this.renderTree;\r\n        cNode.setContext(this.canvas.context, this.canvas.offContext);\r\n        cNode.setDrawing(this);\r\n        cNode.setHitColor();\r\n      });\r\n    }\r\n  }\r\n\r\n  remove(nodeOrID: Node | string) {\r\n    if (nodeOrID instanceof Node) nodeOrID = nodeOrID.id;\r\n\r\n    let queue = [];\r\n    let currentNode;\r\n    queue.push(this.renderTree);\r\n\r\n    while ((currentNode = queue.shift())) {\r\n      if (currentNode.id == nodeOrID) {\r\n        currentNode.transform.parent.childs.splice(currentNode.transform.parent.childs.indexOf(currentNode.transform), 1);\r\n      } else {\r\n        currentNode.transform.childs.forEach((child) => {\r\n          queue.push(child.node);\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  _debugSceneGraph(root: Node, indent: string): void {\r\n    console.log(indent + root.id + '[' + root.order + ']');\r\n\r\n    root.transform.childs.forEach((child) => {\r\n      this._debugSceneGraph(child.node, ' ' + indent);\r\n    });\r\n  }\r\n}\r\n","export enum Handle {\r\n  AUTO = -1\r\n}\r\n","import { Transform, Vector2 } from \"./Math/math\";\r\nimport { Drawing } from \"./drawing\";\r\nimport { Event } from \"./event\";\r\nimport { Color } from \"./color\";\r\n\r\n/**@hidden */\r\nexport abstract class Node implements Event {\r\n  drawing: Drawing;\r\n  context: CanvasRenderingContext2D;\r\n  offContext: OffscreenCanvasRenderingContext2D;\r\n  transform: Transform;\r\n  registeredEvents: any;\r\n  order: number;\r\n  hitColor: string;\r\n\r\n  abstract _render(): void;\r\n  abstract _offRender(): void;\r\n  abstract getDimension(): Vector2;\r\n\r\n  get zIndex(): number {\r\n    return this.order;\r\n  }\r\n\r\n  set zIndex(zIndex: number) {\r\n    this.order = zIndex;\r\n\r\n    if (this.parent) {\r\n      this.parent.transform.childs.sort((a, b) => {\r\n        return a.node.order - b.node.order;\r\n      });\r\n    }\r\n  }\r\n\r\n  get parent(): Node {\r\n    return this.transform.parent.node;\r\n  }\r\n  set parent(newParent: Node) {\r\n    this.transform.parent = newParent.transform;\r\n  }\r\n\r\n  get childs(): Node[] {\r\n    return this.transform.childs.map((child) => {\r\n      return child.node;\r\n    });\r\n  }\r\n\r\n  get position(): Vector2 {\r\n    return this.transform.position;\r\n  }\r\n  set position(position: Vector2) {\r\n    this.transform.position = position;\r\n  }\r\n  get absolutePosition(): Vector2 {\r\n    return this.transform.absolutePosition;\r\n  }\r\n\r\n  get rotation(): number {\r\n    return this.transform.rotation;\r\n  }\r\n  set rotation(degrees: number) {\r\n    this.transform.rotation = degrees;\r\n  }\r\n\r\n  get localRotation(): number {\r\n    return this.transform.localRotation;\r\n  }\r\n  set localRotation(degrees: number) {\r\n    this.transform.localRotation = degrees;\r\n  }\r\n\r\n  get scale(): Vector2 {\r\n    return this.transform.scale;\r\n  }\r\n  set scale(scale: Vector2) {\r\n    this.transform.scale = scale;\r\n  }\r\n\r\n  constructor(public id: string, position: Vector2, controlPoints: Vector2[]) {\r\n    this.transform = new Transform(\r\n      position,\r\n      0,\r\n      0,\r\n      Vector2.One(),\r\n      controlPoints,\r\n      this\r\n    );\r\n    this.registeredEvents = {};\r\n    this.order = 0;\r\n  }\r\n\r\n  setHitColor() {\r\n    // Set unique color for hit detection in offscreen canvas\r\n    let color: string = Color.Random();\r\n    while (this.drawing.colorToNode[color]) {\r\n      color = Color.Random();\r\n    }\r\n\r\n    this.hitColor = color;\r\n    this.drawing.colorToNode[color] = this;\r\n\r\n    this.transform.childs.forEach((child) => {\r\n      child.node.setHitColor();\r\n    });\r\n  }\r\n\r\n  on(eventKey: string, callback: Function): void {\r\n    this.registeredEvents[eventKey] = callback;\r\n  }\r\n\r\n  render(): void {\r\n    this.context.save();\r\n    this._render();\r\n    this.context.restore();\r\n    this.offRender();\r\n\r\n    for (var child of this.transform.childs) {\r\n      child.node.render();\r\n    }\r\n  }\r\n\r\n  offRender(): void {\r\n    this.offContext.save();\r\n    this._offRender();\r\n    this.offContext.restore();\r\n  }\r\n\r\n  call(method: string, args?: any[]) {\r\n    if (this.registeredEvents[method]) {\r\n      if (args) {\r\n        this.registeredEvents[method](this, ...args);\r\n      } else {\r\n        this.registeredEvents[method](this);\r\n      }\r\n    }\r\n\r\n    for (var child of this.transform.childs) {\r\n      child.node.call(method, args);\r\n    }\r\n  }\r\n\r\n  setContext(\r\n    context: CanvasRenderingContext2D,\r\n    offContext: OffscreenCanvasRenderingContext2D\r\n  ) {\r\n    this.context = context;\r\n    this.offContext = offContext;\r\n    this.transform.childs.forEach((child) => {\r\n      child.node.setContext(context, offContext);\r\n    });\r\n  }\r\n\r\n  setDrawing(drawing: Drawing) {\r\n    this.drawing = drawing;\r\n    this.transform.childs.forEach((child) => {\r\n      child.node.setDrawing(drawing);\r\n    });\r\n  }\r\n\r\n  dispose(): void {\r\n    this.drawing.remove(this.id);\r\n  }\r\n}\r\n","export * from \"./enums\";\r\nexport * from \"./drawing\";\r\nexport * from \"./debug\";\r\nexport * from \"./color\";\r\nexport * from \"./canvas\";\r\nexport * as View from \"./View/view\";\r\nexport * from \"./Math/math\";\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(229);\n"],"names":["root","factory","exports","module","define","amd","self","Constant","Math","PI","width","height","max","this","Dimension","value","multiply","another","result","Matrix","Array","length","map","i","j","sum","k","multiplyInPlace","clone","getRotation","atan2","Identity","Zero","Multiply","matrix1","matrix2","_position","_localRotation","_rotation","_scale","controlPoints","node","_parent","childs","localTrasform","worldTransform","refControlPoints","relativeControlPoints","newParent","indexOf","splice","push","parent","sort","a","b","order","newPosition","Vector2","transform","degrees","newRotation","newScale","forEach","controlPoint","subtract","position","updateWorldTransform","parentWorldTransform","cos","sin","x","y","id","rotation","TAU","localRotation","scale","child","applyTransform","index","Transform","toString","toFixed","add","arg1","arg2","addInPlace","subtractInPlace","rotate","pivot","cosT","sinT","rotateInPlace","tmpX","tmpY","matrix","transformInPlace","Midpoint","vector1","vector2","Distance","sqrt","pow","One","Bounds","vectors","minVec","Number","MAX_VALUE","maxVec","MIN_VALUE","vector","Average","sumX","sumY","Random","minXOrCanvas","maxX","minY","maxY","Canvas","random","Lerp","start","end","amount","minor","major","props","outlineColor","fillColor","_render","context","strokeStyle","create","fillStyle","lineWidth","outlineWidth","setLineDash","outlineDashSegments","shadowColor","shadowBlur","shadowOffset","staticShadow","shadowOffsetX","shadowOffsetY","absolutePosition","beginPath","arc","ellipse","fill","outline","stroke","_offRender","offContext","hitColor","getDimension","Node","Ellipse","Empty","source","_source","window","Image","src","crossOrigin","translate","topLeft","drawImage","fillRect","_from","_to","color","lineCap","lineDashSegments","moveTo","from","lineTo","to","Line","vertices","center","closePath","bounds","abs","Polygon","Rectangle","text","textMetricContext","document","createElement","getContext","font","_originalWidth","measureText","_originalHeight","_text","strokeText","fillText","Text","offset","colors","weights","gradient","delta","Handle","AUTO","createLinearGradient","addColorStop","LinearGradient","fromOffset","fromRadius","toOffset","toRadius","fromCenter","toCenter","createRadialGradient","RadialGradient","element","drawingHandle","HTMLDivElement","canvasElement","clientWidth","clientHeight","appendChild","body","offCanvasElement","OffscreenCanvas","draw","drawing","cancelAnimationFrame","requestAnimationFrame","render","bind","floor","rgbToHex","rgb","Color","_componentToHex","c","hex","debugPoint","key","point","frames","Debug","limitDebugCalls","debugCalls","debugFunction","_debugPoint","arguments","canvas","radius","debugLine","_debugLine","show","debug","call","save","restore","shift","globalUpdate","rootNode","renderTree","mousePos","colorToNode","_registerEvents","currentHitNode","prevHitNode","canvasOffset","currentDragNode","onmousemove","ev","getBoundingClientRect","clientX","left","clientY","top","_getHitNode","onmousedown","hitNode","onmouseup","onclick","oncontextmenu","preventDefault","getImageData","data","clearRect","setContext","setDrawing","setHitColor","cNode","remove","nodeOrID","currentNode","queue","_debugSceneGraph","indent","console","log","Drawing","registeredEvents","zIndex","on","eventKey","callback","offRender","method","args","dispose","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}